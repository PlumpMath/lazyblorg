## Time-stamp: <2013-09-13 16:13:50 vk>
## -*- coding: utf-8 -*-
## This file is best viewed with GNU Emacs Org-mode: http://orgmode.org/

* lazyblorg -- blogging with Org-mode for very lazy people

This is a web log (blog) environment for [[http://en.wikipedia.org/wiki/Emacs][GNU Emacs]] with [[http://orgmode.org/][Org-mode]]
which generates static HTML5 web pages.

For a list of similar/alternative projects, please visit
http://orgmode.org/worg/org-blog-wiki.html

See [[http://article.gmane.org/gmane.emacs.orgmode/49747/][my original post to the Org-mode ML]] for how this idea started.

- *target group*: users of [[http://orgmode.org/][Org-mode]] who want to do blogging very easily
- *skills necessary*
  - modifying configuration settings, e.g., in script files
  - (optional) creating scheduled tasks (crond, ...)

** Why lazyblorg?

*Minimum effort* for blogging.

«A designer knows he has achieved perfection not when there is nothing
left to add, but when there is nothing left to take away.» ([[https://en.wikipedia.org/wiki/Antoine_de_Saint-Exup%25C3%25A9ry][Antoine de
Saint-Exupéry]])

And: your blog entries can be written *anywhere in your Org-mode
files*. They will be found by lazyblorg. :-)

Further advantages are listed in the FAQ section below.

** Example

1. write a blog entry *anywhere* in your Org-mode files
2. tag your entry with ~:blog:~
3. add an unique ID in the PROPERTIES drawer
   - You might want to use a package that automatically generates
     unique IDs to your headings (I don't).
   - You might want to take a look [[article.gmane.org/gmane.emacs.orgmode/16199][at this solution using file or
     directory variables]].
4. set the state of your entry to ~DONE~
   - make sure that a ~:LOGBOOK:~ drawer entry will be created that
     contains the time-stamp

That's it. lazyblorg does the rest. It feels like magic, doesn't it? :-)

** Advantages

*No other Org-mode blogging system* I know of is able to process blog
entries which are *scattered across all your Org-mode documents*.

*No other Org-mode blogging system* I know of is able to generate a
blog entry with that *minimum effort* to the author.

- You do not need to maintain a specific Org-mode file that contains
  you blog posts only.
  - [[http://www.tbray.org/ongoing/When/201x/2011/03/07/BNotes][*Create* blog posts]] *anywhere* in between your notes, todos,
    contacts, ...
- You don't need to write HTML code by yourself.
- produces static, state-of-the-art HTML5
  - it's super-fast on delivery to browsers
  - very low computing requirements on your web server: minimum of server load
- No in-between format or tool.
  - Direct conversion from Org-mode to HTML/CSS.
  - dependencies have the tendency to cause problems when the
    dependent tools change over time
  - lazyblorg should be running fine for a long time after it is set
    up properly
- Decide by yourself how and where you are hosting your blog files
  and log files.
- you will find more advantages when running and using lazyblorg - I
  am very confident about that ;-)

** Disadvantages

- lazyblorg *re-generates the complete set of output pages on every run*
  - this will probably changed in a future release (no high priority)
  - most of the time this is not an issue at all
    - if pages are generated on a different system as the web server
      runs on, performance is a minor issue
    - if you don't have thousands of pages, this will not take long
- lazyblorg is implemented in Python:
  - Its Org-mode parser supports *only a sub-set of Org-mode syntax*
    and features.
- lazyblorg is using state-of-the art HTML5 and CSS3
  - No old HTML4.01 transitional stuff or similar
  - Results might not be compatible with browsers such as Internet
    Explorer or mobile devices.
- You have to accept the one-time setup which requires knowledge of:
  - using command-line tools
  - modifying configuration files

** Features

lazyblorg will support a basic set of syntax of Org-mode. It will also
support RSS feed(s), tags, (external) image files, tables, static
pages (outside of day-oriented blog entry hierarchy), updates, and
more.

** FAQs

*** Why lazyblorg and not <another project>?

Please do read the sections "Why lazyblorg" and "Advantages" above.

*** Does lazyblorg cost anything?

No.

Although, please do respect [[file:license.txt][the license which is attached]] to this project.

As with every open source project, you will find that there are some
costs: your time. However, you will gain additional knowledge from
coping with it. :-)

*** Am I able to use lazyblorg for myself?

Yes.

Get it from [[https://github.com/novoid/lazyblorg][github]] and read the installation notes in this file.

*** What Org-mode elements are supported by lazyblorg?

The parser only implements a sub-set of Org-mode syntax. See section
"notes" in [[file:dev/lazyblorg.org]] for a detailed list of supported
elements.

*** Where can I find support for lazyblorg?

Short: please do help yourself. :-)

Long: I developed lazyblorg for my own purposes and therefore it is
optimized for my own requirements only. If you find lazyblorg cool
and you want to use it on your own, I am totally OK with
that. However, I can not offer much time in supporting other
requirements than my own.

*** Is lazyblorg in active development? What are the future plans?

Currently (2013-08): yes (heavy) :-)

My plan as of 2013-08: 
- develop lazyblorg to be able to replace my current web page and its blog.
- Add features to lazyblorg as long as I feel the urge to.
- Be open to enhancements done by others on github.
- If lazyblorg reaches a state, where I do not need anything
  additional, let's keep it that way: development stopped because it
  reached sufficient perfection :-)

See also [[file:dev/lazyblorg.org]] for the issue tracking with all kind
of information about the development (open issues, plans,
documentation, ...).

*** Is there any documentation about the internals of lazyblorg?

Yes, please do read [[file:dev/lazyblorg.org]] (especially section "notes").

*** Lazyblorg uses what technology?

- Python 2.x
  - misc dependencies, nothing fancy
- input: Org-mode files of version 8.x
- output: static HTML5, CSS3

*** Can I use the Org-mode parser (in Python) for other purposes as well? 

Yes, please do read [[file:dev/lazyblorg.org]] and [[file:lib/orgparser.py]].

Although, you have to modify it a bit since I filter out headings
that meet the criteria of being a blog article.

Please also note that this parser only implements a sub-set of
Org-mode syntax (see section "notes" in [[file:dev/lazyblorg.org]]).

*** I do have a question but it is not listed here. Where to ask?

Just drop me a line: lazyblorg <at-sign> Karl <minus-sign> Voit <dot> at

* FIXXME: Install

Currently, lazyblorg is in alpha status. It's not ready yet - Sorry!

* Contribute!

I am looking for your ideas:

If you want to contribute to this cool project, please fork and
contribute!

Issues, bugs, userstories, ... are maintained in dev/lazyblorg.org

I am using [[http://www.python.org/dev/peps/pep-0008/][Python PEP8]] and [[http://en.wikipedia.org/wiki/Test-driven_development][Test Driven Development (TDD)]].


* Local Variables                                                  :noexport:
# Local Variables:
# mode: auto-fill
# mode: flyspell
# eval: (ispell-change-dictionary "en_US")
# End:
