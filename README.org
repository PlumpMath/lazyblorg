## Time-stamp: <2014-02-01 14:33:50 vk>
## -*- coding: utf-8 -*-
## This file is best viewed with GNU Emacs Org-mode: http://orgmode.org/

* lazyblorg -- blogging with Org-mode for very lazy people

This is a web log (blog) environment for [[http://en.wikipedia.org/wiki/Emacs][GNU Emacs]] with [[http://orgmode.org/][Org-mode]]
which generates static HTML5 web pages.

For a list of similar/alternative projects, please visit
http://orgmode.org/worg/org-blog-wiki.html

See [[http://article.gmane.org/gmane.emacs.orgmode/49747/][my original post to the Org-mode ML]] for how this idea started.

- *target group*: users of [[http://orgmode.org/][Org-mode]] who want to do blogging very easily
- *skills necessary*
  - modifying configuration settings, e.g., in script files
  - (optional) creating scheduled tasks (crond, ...)

** Why lazyblorg?

*Minimum effort* for blogging.

«A designer knows he has achieved perfection not when there is nothing
left to add, but when there is nothing left to take away.» ([[https://en.wikipedia.org/wiki/Antoine_de_Saint-Exup%25C3%25A9ry][Antoine de
Saint-Exupéry]])

And: your blog entries can be written *anywhere in your Org-mode
files*. They will be found by lazyblorg. :-)

Further advantages are listed below.

** Example workflow for creating a blog entry

1. write a blog entry *anywhere* in your Org-mode files
2. tag your entry with ~:blog:~
3. add an unique ID in the PROPERTIES drawer
   - You might want to use a package that automatically generates
     unique IDs to your headings (I don't).
   - You might want to take a look [[article.gmane.org/gmane.emacs.orgmode/16199][at this solution using file or
     directory variables]].
4. set the state of your entry to ~DONE~
   - make sure that a ~:LOGBOOK:~ drawer entry will be created that
     contains the time-stamp

That's it. lazyblorg does the rest. It feels like magic, doesn't it? :-)

** Advantages

*No other Org-mode blogging system* I know of is able to process blog
entries which are *scattered across all your Org-mode documents*.

*No other Org-mode blogging system* I know of is able to generate a
blog entry with that *minimum effort* to the author.

- You do not need to maintain a specific Org-mode file that contains
  you blog posts only.
  - [[http://www.tbray.org/ongoing/When/201x/2011/03/07/BNotes][*Create* blog posts]] *anywhere* in between your notes, todos,
    contacts, ...
- You don't need to write HTML code by yourself.
- produces static, state-of-the-art HTML5
  - it's super-fast on delivery to browsers
  - very low computing requirements on your web server: minimum of server load
- No in-between format or tool.
  - Direct conversion from Org-mode to HTML/CSS.
  - dependencies have the tendency to cause problems when the
    dependent tools change over time
  - lazyblorg should be running fine for a long time after it is set
    up properly
- Decide by yourself how and where you are hosting your blog files
  and log files.
- you will find more advantages when running and using lazyblorg - I
  am very confident about that ;-)

** Disadvantages

- lazyblorg *re-generates the complete set of output pages on every run*
  - this will probably changed in a future release (no high priority)
  - most of the time this is not an issue at all
    - if pages are generated on a different system as the web server
      runs on, performance is a minor issue
    - if you don't have thousands of pages, this will not take long
- lazyblorg is implemented in Python:
  - Its Org-mode parser supports *only a sub-set of Org-mode syntax*
    and features.
- lazyblorg is using state-of-the art HTML5 and CSS3
  - No old HTML4.01 transitional stuff or similar
  - Results might not be compatible with browsers such as Internet
    Explorer or mobile devices.
- You have to accept the one-time setup which requires knowledge of:
  - using command-line tools
  - modifying configuration files

** Features

lazyblorg will support a basic set of syntax of Org-mode. It will also
support RSS feed(s), tags, (external) image files, tables, static
pages (outside of day-oriented blog entry hierarchy), updates, and
more.

** FAQs

*** Why lazyblorg and not <another project>?

Please do read the sections "Why lazyblorg" and "Advantages" above.

*** Does lazyblorg cost anything?

No.

Although, please do respect [[file:license.txt][the license which is attached]] to this project.

As with every open source project, you will find that there are some
costs: your time. However, you will gain additional knowledge from
coping with it. :-)

*** Am I able to use lazyblorg for myself?

Yes.

Get it from [[https://github.com/novoid/lazyblorg][github]] and read the installation notes in this file.

*** What Org-mode elements are supported by lazyblorg?

The parser only implements a sub-set of Org-mode syntax. See section
"notes" in [[file:dev/lazyblorg.org]] for a detailed list of supported
elements.

*** Where can I find support for lazyblorg?

Short: please do help yourself. :-)

Long: I developed lazyblorg for my own purposes and therefore it is
optimized for my own requirements only. If you find lazyblorg cool
and you want to use it on your own, I am totally OK with
that. However, I can not offer much time in supporting other
requirements than my own.

*** Is lazyblorg in active development? What are the future plans?

Currently (2013-08): yes (heavy) :-)

My plan as of 2013-08: 
- develop lazyblorg to be able to replace my current web page and its blog.
- Add features to lazyblorg as long as I feel the urge to.
- Be open to enhancements done by others on github.
- If lazyblorg reaches a state, where I do not need anything
  additional, let's keep it that way: development stopped because it
  reached sufficient perfection :-)

See also [[file:dev/lazyblorg.org]] for the issue tracking with all kind
of information about the development (open issues, plans,
documentation, ...).

*** Is there any documentation about the internals of lazyblorg?

Yes, please do read [[file:dev/lazyblorg.org]] (especially section "notes").

*** Lazyblorg uses what technology?

- input files: Org-mode files of version 8.x
- processing: Python 2.x
  - some dependencies on libraries, nothing fancy
- output files: static HTML5, CSS3

*** Can I use the Org-mode parser (in Python) for other purposes as well? 

Yes, please do read [[file:dev/lazyblorg.org]] and [[file:lib/orgparser.py]].

Although, you have to modify it a bit since I filter out headings
that meet the criteria of being a blog article.

Please also note that this parser only implements a sub-set of
Org-mode syntax (see section "notes" in [[file:dev/lazyblorg.org]]).

*** I do have a question but it is not listed here. Where to ask?

Just drop me a line: lazyblorg <at-sign> Karl <minus-sign> Voit <dot> at

* Installing and Starting with lazyblorg

Currently, lazyblorg is in *beta status*. It's not finished
yet. However, I am using it for [[http://Karl-Voit.at][my own blog]] and therefore it gets more
and more ready to use as I add new features.

What's working so far:
- parsing a very basic sub-set of Org-mode
- parsing the HTML templates
- generating HTML5 pages with a sub-set of the sub-set of the Org-mode
  syntax elements

Non-working things are either mentioned in [[https://github.com/novoid/lazyblorg/blob/master/dev/lazyblorg.org][dev/lazyblorg.org]] or marked
with "FIXXME" in the source code files.

** How to Start

1. Get the source
2. do a test-drive with ~lazyblorg/example_invocation.sh~
   - this should work
   - if not, there is something wrong with the set-up; maybe missing
     external libraries, wrong paths, ...
3. study, understand, and adopt the content of ~[[https://github.com/novoid/lazyblorg/blob/master/example_invocation.sh][example_invocation.sh]]~
4. get youself an overview on *what defines a lazyblorg blog post*
   1. A (direct) tag has to be ~blog~
      - Sorry, no tag inheritance (yet)
   2. You have to add an ~:ID:~ property
   3. The entry has to be marked with ~DONE~
   4. A ~:LOGBOOK:~ entry has to be found with the time-stamp of
      setting the entry to ~DONE~
      - in [[https://github.com/novoid/dot-emacs][my set-up]], this is created automatically
   5. Do not use Org-mode elements that lazyblorg does not understand
      - you should not get a disaster if you are using new
        elements. Only the result might be disappointing.
5. write your own blog posts
6. write your own CSS file
   - you can [[http://Karl-Voit.at/public_voit.css][take a look on mine]] if you do not care that I am not
     really into Web design :-)
7. adopt the blog template in ~[[https://github.com/novoid/lazyblorg/blob/master/templates/blog-format.org][lazyblorg/templates/blog-format.org]]~
8. publish your pages on a web space of your choice
   - publishing can be done in various ways. This is how I do it using
     ~lazyblorg/make_and_publish_public_voit.sh~ which is an
     adopted version of ~example_invocation.sh~:
     1. executing ~testall.sh~
        - this is for checking whether or not recent code changes did
          something harmful to my (unfortunately very limited) set of
          unit tests
     2. executing ~lazyblorg~ with my more or less fixed set of
        command line parameters
     3. executing ~rsync -av testdata/2del/blog/* $HOME/public_html/~
        - it synchronizes the newly generated blog data to the local
          copy of my web space data
     4. executing ~[[http://www.cis.upenn.edu/~bcpierce/unison/][unison]]~
        - in order to transfer my local copy of my web space data to
          my public web space
   - This method has the advantage, that generating (executing
     ~lazyblorg~) and publishing (executing ~unison~) are separate
     steps. I can locally re-generate the blog (for testing purposes)
     as often I want to. However, as long as I do not sync it to my
     web space, I keep the meta-data (which is in the local web space
     copy) of the published version (and not the meta-data of the
     previous test-run).
9. have fun with a pretty neat method to generate your blog pages

* Contribute!

I am looking for your ideas:

If you want to contribute to this cool project, please fork and
contribute!

Issues, bugs, userstories, ... are maintained in [[https://github.com/novoid/lazyblorg/blob/master/dev/lazyblorg.org][dev/lazyblorg.org]]

I am using [[http://www.python.org/dev/peps/pep-0008/][Python PEP8]] and some ideas from [[http://en.wikipedia.org/wiki/Test-driven_development][Test Driven Development
(TDD)]].


* Local Variables                                                  :noexport:
# Local Variables:
# mode: auto-fill
# mode: flyspell
# eval: (ispell-change-dictionary "en_US")
# End:
