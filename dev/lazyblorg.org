# -*- mode: org; coding: utf-8; -*-
# Time-stamp: <2014-12-26 15:30:39 vk>
* header information                                               :noexport:
:PROPERTIES:
:CREATED:  [2013-01-08 Tue 14:24]
:END:

#+TITLE:     lazyblorg development informations and issue tracker
#+AUTHOR:    Karl Voit
#+EMAIL:     tools@Karl-Voit.at
#+DATE:
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:

#+STARTUP: hidestars

#+STARTUP: overview   (or: showall, content, showeverything)
http://orgmode.org/org.html#Visibility-cycling

#+TODO: TODO(t) NEXT(n) STARTED(s) WAITING(w@/!) SOMEDAY(S!) | DONE(d!/!) CANCELLED(c@/!)
http://orgmode.org/org.html#Per_002dfile-keywords

#+TAGS: { wish(w) bug(b) userstory(u) inconsistency(i) question(q) architecture(a) tests(t) }
http://orgmode.org/org.html#Setting-tags


* Issue Tracking                                                     :issues:
:PROPERTIES:
:VISIBILITY: children
:CREATED:  [2013-01-08 Tue 14:26]
:END:

NOTE: Some issues that are marked as DONE or CANCELED are moved to the
corresponding archive-file "lazyblorg.org_archive".

** DONE spike: time-ordered-index data structure              :architecture:
CLOSED: [2013-08-20 Tue 15:02]
:LOGBOOK:
- State "DONE"       from "STARTED"    [2013-08-20 Tue 15:02]
:END:
:PROPERTIES:
:CREATED:  [2013-08-20 Tue 14:57]
:END:

- problem:
  - keep a sorted list of elements like [ [<time-stamp>,<id>], [...] ]

- http://wiki.python.org/moin/HowTo/Sorting/
  - sorting by index or named attribute!

Sorting by age using tuples:
#+BEGIN_SRC python
>>> student_tuples = [
        ('john', 'A', 15),
        ('jane', 'B', 12),
        ('dave', 'B', 10),
]
>>> sorted(student_tuples, key=lambda student: student[2])   # sort by age
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
#+END_SRC

Sorting by attribute of a class:
#+BEGIN_SRC python
>>> class Student:
        def __init__(self, name, grade, age):
                self.name = name
                self.grade = grade
                self.age = age
        def __repr__(self):
                return repr((self.name, self.grade, self.age))

>>> student_objects = [
        Student('john', 'A', 15),
        Student('jane', 'B', 12),
        Student('dave', 'B', 10),
]
>>> sorted(student_objects, key=lambda student: student.age)   # sort by age
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
#+END_SRC

** DONE Decision algorithm for generating entries; storage data :architecture:
CLOSED: [2013-08-20 Tue 14:44]
:LOGBOOK:
- State "DONE"       from "TODO"       [2013-08-20 Tue 14:44]
:END:
:PROPERTIES:
:CREATED:  [2012-11-06 Tue]
:ID: 2012-11-06-ago-generating
:END:

| *case* | *ID*      | *created*    | *last_update*   | *checksum*   | *result*                     | *description*                    |
|--------+-----------+--------------+-----------------+--------------+------------------------------+----------------------------------|
|      1 | not found | DC           | DC              | DC           | WARNING                      | blog-entry without ID            |
|      2 | not known | DC           | DC              | DC           | generate; FEED                | 1st time generation              |
|      3 | known     | not found    | DC              | DC           | WARNING                      | blog-entry without CREATED       |
|      4 | known     | not matching | DC              | DC           | ERROR                        | CREATED should not change        |
|      5 | known     | matching     | same as CREATED | matching     |                              | not changed since 1st generation |
|      6 | known     | matching     | unchanged       | matching     |                              | not changed since last update    |
|      7 | known     | matching     | unchanged       | not matching | generate; noFEED; noIncrement | silent update                    |
|      8 | known     | matching     | changed         | not matching | generate; FEED; Increment     | normal Update                    |

- for each ORGMODE-file
  - for each entry tagged with BLOGTAG AND in DONE state
    - if no :ID: found
      - case1
      - warning
      - continue with next heading
    - if ID not known
      - case2
      - generate FEED
      - generate HTML
      - continue with next heading
    - if CREATED not found
      - case3
      - warning
      - continue with next heading
    - if CREATED not matching previous run
      - case4
      - error-msg
      - continue with next heading
    - elseif CREATED and CHECKSUM matches
      - case5 or case6
      - debug: entry has not changed
    - elseif CREATED matches and CHECKSUM not matching
      - if LASTUPDATE changed
        - case8
        - increment update-number
        - generate FEED
        - generate HTML
      - else (if LASTUPDATE unchanged)
        - case7
        - generate HTML

- "FEED" means:
  - update time-ordered-index

- persistence storage has to hold (at least):
  - per blog entry:
    - ID
    - CREATED time-stamp
    - LAST_UPDATE time-stamp
    - checksum
  - time-ordered-index (OR: re-generate out of blog data)
    - LAST_UPDATE
    - ID

*** DONE [#A] finalize lazyblorg-algorithm sketch
CLOSED: [2012-11-10 Sat 18:10] DEADLINE: <2012-11-10 Sat>
:LOGBOOK:
- State "DONE"       from "NEXT"       [2012-11-10 Sat 18:10]
:END:
:PROPERTIES:
:CREATED:  [2012-11-07 Wed 21:23]
:END:
** DONE paper: sketch main page                                  :userstory:
CLOSED: [2014-02-01 Sat 15:02]
:LOGBOOK:
- State "DONE"       from "STARTED"    [2014-02-01 Sat 15:02]
:END:
:PROPERTIES:
:CREATED:  [2013-02-14 Thu 16:39]
:END:

- top: public voit banner (as usual)
- main content: 7 most recent blog entries
  - only up to first HR or heading
    - if HR/heading is found, add "read while article..." as link below
- side-bar
  1. "about" (persistent page)
     - about this blog
       - SW being used
       - how to follow
       - link to FEED
     - about Karl Voit
       - Twitter
       - github
  2. "tags" (persistent page)
     - explaining why I am using tags
     - auto-tags
     - overview on tags
  3. 2011, 2012, 2013, ...: yearly overview pages
     - of all years that contain blog articles
  4. "follow me": get updates via FEED (persistent page)
     - explaining the methods I provide

Defining the content in a special template heading:

- main page as "** Mainpage"
------------
- side-bar as "*** Sidebar"
  - list of elements
  - HR as separator (as shown above)
** DONE paper: sketch overview pages                             :userstory:
CLOSED: [2014-02-01 Sat 15:03]
:LOGBOOK:
- State "DONE"       from "STARTED"    [2014-02-01 Sat 15:03]
:END:
:PROPERTIES:
:CREATED:  [2014-02-01 Sat 15:02]
:END:

- see paper from [2014-01-31 Fri]

** DONE implement method(s) to get URL of an blogdata id      :architecture:
CLOSED: [2014-03-01 Sat 20:10]
:PROPERTIES:
:CREATED:  [2014-11-30 Sun 12:42]
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-03-01 Sat 20:10]
:END:
:PROPERTIES:
:CREATED:  [2013-10-19 Sat 19:16]
:END:

- [X] get absolute/relative URL of any entry ID

  - (Pdb) self._target_path_for_id_with_targetdir_and_prefixdir(entry['id'])
    - u'testdata/2del/blog/2013/08/21/lazyblorg-templates'
    - (Pdb) self.targetdir  ->   'testdata/2del'
    - self.prefix_dir ->  blog

  - (Pdb) self._target_path_for_id_without_targetdir_and_prefixdir(entry['id'])
    - u'2013/08/21/lazyblorg-templates'

** NEXT add tags to front page                                                           :userstory:
SCHEDULED: <2014-12-26 Fri>
:PROPERTIES:
:CREATED:  [2014-12-26 Fri 14:54]
:END:
** NEXT add? [[http://www.heise.de/newsticker/meldung/c-t-entwickelt-datenschutzfreundliche-Social-Media-Buttons-weiter-2466687.html][Shariff: c't entwickelt datenschutzfreundliche Social-Media-Buttons weiter]]   :userstory:
:PROPERTIES:
:CREATED:  [2014-11-30 Sun 12:42]
:END:

- Erkl√§rung: http://www.heise.de/newsticker/foren/S-Re-Find-ich-schon-Re-Keine-gute-Idee/forum-288901/msg-26149283/read/
  - http://www.heise.de/ct/ausgabe/2014-26-Social-Media-Buttons-datenschutzkonform-nutzen-2463330.html
- https://github.com/heiseonline/shariff
** NEXT CSS: blocks like src: remove lines from right/top/bottom & add color gradient to right :wish:
:PROPERTIES:
:CREATED:  [2014-08-10 Sun 18:32]
:END:
** NEXT [#A] (paper?) sketch: sidebar                                                     :userstory:
SCHEDULED: <2014-12-26 Fri>
:PROPERTIES:
:CREATED:  [2014-11-01 Sat 11:53]
:END:
:LOGBOOK:
- Rescheduled from "<2014-11-30 Sun>" on [2014-12-01 Mon 22:03]
- Rescheduled from "<2014-11-08 Sat>" on [2014-11-09 Sun 17:27]
- Rescheduled from "<2014-10-31 Fri>" on [2014-11-01 Sat 11:53]
- Rescheduled from "2014-09-23 Tue" on [2014-10-24 Fri 15:24]
:END:
:PROPERTIES:
:CREATED:  [2014-09-21 Sun 12:32]
:END:

- examples:
  - http://blog.coderscabal.org/
  - http://semantic-ui.com/modules/sidebar.html

|                                       |                                  |
| public voit (the content of the page) |                                  |
|                                       | Archive                          |
|                                       | Recent articles                  |
|                                       | Search via DuckDuckGo            |
|---------------------------------------+----------------------------------|
|                                       | About this blog                  |
|                                       | How to use this blog efficiently |
|---------------------------------------+----------------------------------|
|                                       | Follow/subscribe links           |
|                                       | Follow/subscribe content         |
|                                       |                                  |

** NEXT create sidebar                                           :userstory:
:PROPERTIES:
:CREATED:  [2014-05-11 Sun 18:00]
:END:

- example: http://blog.coderscabal.org/
  - http://blog.coderscabal.org/wp-content/themes/messdesk/style.css
#+BEGIN_EXAMPLE
#sidebar	{
	float: right;
	width: 300px;
	padding: 0px 50px 0px 0px;
	}

#sidebar ul, #sidebar ul ol {
	margin: 0;
	padding: 0;
	}

#sidebar ul li {
	list-style-type: none;
	list-style-image: none;
	margin: 0px 0px 25px 0px;
	padding: 0px 0px 10px 0px;
	background-image: url(images/bg_sidebar_bottom.png);
	background-repeat: no-repeat;
	background-position: right bottom;
	float: left;
	}

#sidebar ul p, #sidebar ul select {
	margin: 5px 0 8px;
	
	}

#sidebar ul ul, #sidebar ul ol {
	margin: 0px;
	background-image: url(images/bg_sidebar_ul.jpg);
	background-repeat: repeat-y;
	background-position: right top;
	padding: 0px 0px 0px 45px;
	float: left;
	}

#sidebar ul ul ul, #sidebar ul ol {
	margin: 0 0 0 10px;
	}

ol li, #sidebar ul ol li {
	list-style: decimal outside;
	}

#sidebar ul ul li, #sidebar ul ol li {
	margin: 0px;
	padding: 8px 0px;
	background-image: url(images/bg_sidebar_li.jpg);
	background-repeat: no-repeat;
	background-position: left top;
	float: left;
	width: 255px;
	}
#sidebar ul li ul li ul {
	margin: 0px;
	padding: 0px;
	float: left;
background-image: none;
	}

#sidebar ul li ul li ul li {
	margin: 0px;
	padding: 8px 0px 0px 10px;
	float: left;
	width: 225px;
background-image: none;
	}

#+END_EXAMPLE

** NEXT fix: ~-escaping                                                :bug:
:PROPERTIES:
:CREATED:  [2014-06-22 Sun 18:32]
:END:

- see id:2014-05-09-managing-digital-photographs
: All portrait photographs are rotated using [[http://www.sentex.net/~mwandel/jhead/][jhead]]. Also
: with jhead, I generate file-name time-stamps from the Exif header
: time-stamps. Using [[https://github.com/novoid/date2name][date2name]] I add time-stamps also to the movie
: files. After processing all those files, they get moved to the
: destination folder for new digicam files: ~$HOME/tmp/digicam/tmp/~.

... will be transformed into:

#+BEGIN_HTML
All portrait photographs are rotated using 
<a href="http://www.sentex.net/<code>mwandel/jhead/">jhead</a>. Also with jhead, 
I generate file-name time-stamps from the Exif header time-stamps. 
Using <a href="https://github.com/novoid/date2name">date2name</a> I add time-stamps 
also to the movie files. After processing all those files, they get moved to the 
destination folder for new digicam files: </code>$HOME/tmp/digicam/tmp/~.
#+END_HTML

... which is wrong

** NEXT Atom-feed mit CDATA                                   :architecture:
:PROPERTIES:
:CREATED:  [2014-06-08 Sun 22:07]
:END:

- <2014-06-08 Sun> stefan2904 Twitter: can not read feed with tinyTinyRSS
  - validator wants fixes

** STARTED get ordered lists of blog entries                  :architecture:
:PROPERTIES:
:CREATED:  [2014-02-01 Sat 13:48]
:END:

- [X] time-ordered by last modification (for FEED and main page)
  - Newest entry of entry['finished-timestamp-history'] is the
    time-stamp of the last update
  - for each entry in entries
    - get newest entry of entry['finished-timestamp-history']
    - store to a sorted list (newest first or last)

- [ ] time-ordered by issue day (for overview pages)
  - Oldest entry of entry['finished-timestamp-history'] is the publication time-stamp!
  - for each entry in entries
    - get oldest entry of entry['finished-timestamp-history']
    - store to a sorted list (newest first or last)
** NEXT parse/htmlize: lists                                     :userstory:
:LOGBOOK:
- Not scheduled, was "2014-05-18 Sun" on [2014-05-18 Sun 09:56]
- Rescheduled from "2014-05-16 Fri" on [2014-05-17 Sat 11:34]
- Rescheduled from "2014-05-10 Sat" on [2014-05-11 Sun 17:53]
- Rescheduled from "2014-05-06 Tue" on [2014-05-07 Wed 17:32]
- Rescheduled from "2014-04-28 Mon" on [2014-04-27 Sun 22:07]
:END:
:PROPERTIES:
:CREATED:  [2014-02-01 Sat 15:25]
:ID: 2014-08-10-lb-lists-implementation
:END:

- http://orgmode.org/worg/dev/org-syntax.html#Plain_Lists_and_Items

A starting line which is not part of the list:
- example list
- second line
  - sub-items
  - another one
    - yet another level
    - This one also with a very long line that gets wrapped to a
      second line you should also take into account
  - second again
- first again
Not a list any more.

** NEXT add: --include-archived-entries                                                  :userstory:
:PROPERTIES:
:CREATED:  [2014-10-19 So 12:01]
:END:

- [ ] check if archived tag gets removed
- [ ] add command line parameter for adding archived entries
  - by default, archived entries do *not* get added to the blog

** NEXT fix lists in my current blog entries                     :userstory:
SCHEDULED: <2014-08-10 Sun>
:PROPERTIES:
:CREATED:  [2014-08-10 Sun 10:38]
:BLOCKER: 2014-08-10-lb-lists-implementation
:END:

- id:apps-I-am-using
- id:2012-04-15-mobile-usage-pattern
- id:2012-12-23-todo-with-orgmode
- id:2014-08-10-other-peoples-IT-setup

** NEXT fix tilde in URL                                               :bug:
:PROPERTIES:
:CREATED:  [2014-03-30 Sun 14:55]
:END:

: http://sd.wareonearth.com/~phil/xdu/examp1.gif
... gets messed up to:
: http://sd.wareonearth.com/</code>phil/xdu/examp1.gif
on https://karl-voit.at/2014/03/25/xdu

- [ ] add unit test to htmlizer
- [ ] fix bug
- [ ] test

** NEXT escape <> in blocks                                            :bug:
:PROPERTIES:
:CREATED:  [2014-04-12 Sat 18:03]
:END:
[2014-04-11 Fr. 14:50]

** NEXT mark integration points with "## INTEGRATION: "           :userstory:
:PROPERTIES:
:CREATED:  [2014-03-16 Sun 20:04]
:END:
** NEXT move feed generator from htmlizer in own module       :architecture:
:PROPERTIES:
:CREATED:  [2014-03-18 Di 09:53]
:END:
** NEXT tag pages: content                                       :userstory:
:PROPERTIES:
:CREATED:  [2014-04-20 Sun 11:25]
:END:

- with:
  - optional description,
  - preview of latest x entries, and
  - headings of all older entries

** NEXT tags of articles on entry page                            :userstory:
:PROPERTIES:
:CREATED:  [2014-03-04 Di 13:41]
:END:
** NEXT move blog-tag(s) to CLI parameter                        :userstory:
:PROPERTIES:
:CREATED:  [2014-03-08 Sat 18:51]
:END:

- filter Org-mode articles with parameter of one or more tags
- allows for generating different blogs (or sub-blogs) just with
  different commands

** STARTED HTML: manually create month overview page          :architecture:
:LOGBOOK:
- Not scheduled, was "2014-03-01 Sat" on [2014-03-01 Sat 21:01]
:END:
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 14:12]
:END:

#+BEGIN_EXAMPLE
[[Public Voit]] > [[2014]] - 01

- 2014-01-17: Title of the blog article
- 2014-01-21: Another title

#+END_EXAMPLE

- tasks
  - [X] create blog-format.org entries with HTML source and
    replacement entities
  - [ ] implement in Python

** NEXT duck duck go site search in sidebar                       :userstory:
:PROPERTIES:
:CREATED:  [2014-05-03 Sat 15:57]
:END:
[2014-05-01 Do. 08:35]

- https://duckduckgo.com/search_box

#+BEGIN_HTML
<iframe src="http://duckduckgo.com/search.html?width=200&site=karl-voit.at&prefill=Search Public Voit" style="overflow:hidden;margin:0;padding:0;width:258px;height:40px;" frameborder="0"></iframe>
#+END_HTML

** NEXT HTML: manually create year overview page              :architecture:
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 14:12]
:END:

#+BEGIN_EXAMPLE
[[Public Voit]] > [[Archive]]: 2014

January: 2 [is link to monthly overview]
February: 
March: 4
...

#+END_EXAMPLE

- tasks
  - [ ] create blog-format.org entries with HTML source and
    replacement entities
  - [ ] implement in Python

** NEXT HTML: manually create archive overview page         :architecture:

#+BEGIN_EXAMPLE
[[Public Voit]] > Archive

[from year of oldest entry to year of newest entry]

|      | Jan | Feb | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec |
| 2009 |     |     | [[1]]   |     | [[5]]   |     |     | [[2]]   |     |     |     |     |
| 2010 |     |     |     |     |     |     |     |     |     |     |     |     |
| 2011 |     |     |     |     |     |     |     |     |     |     |     |     |
| 2012 |     |     |     |     |     |     |     |     |     |     |     |     |
| 2013 |     |     |     |     |     |     |     |     |     |     |     |     |
| 2014 |     |     |     |     |     |     |     |     |     |     |     |     |

#+END_EXAMPLE

- tasks
  - [ ] create blog-format.org entries with HTML source and
    replacement entities
  - [ ] implement in Python

** NEXT HTML: manually create day overview page               :architecture:
:LOGBOOK:
- Not scheduled, was "2014-03-01 Sat" on [2014-03-01 Sat 21:01]
:END:
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 14:11]
:END:

like monthly overview but only for the day

- tasks
  - [ ] create blog-format.org entries with HTML source and
    replacement entities
  - [ ] implement in Python
** NEXT internal links to sub-headings                        :architecture:
:PROPERTIES:
:CREATED:  [2014-03-10 Mo 09:55]
:END:

- sub-headings within blog articles can have ID-property as well
- parser indexes those IDs
- HTML template adds anchor-ID
- sanitize internal links resolves those links as well

** NEXT implement: creating TAG pages                             :userstory:
:PROPERTIES:
:CREATED:  [2013-10-19 Sat 18:50]
:ID: 2013-10-19-lb-tag-pages
:END:

- [ ] htmlizer
- [ ] update test_sanitize_internal_links() in htmlizer_test.py

** NEXT fix links to tags in my current blog entries             :userstory:
SCHEDULED: <2014-08-10 Sun>
:PROPERTIES:
:CREATED:  [2014-08-10 Sun 12:57]
:BLOCKER: 2013-10-19-lb-tag-pages
:END:

- id:2014-08-10-other-peoples-IT-setup

** NEXT embed images that are defined by tsfile-statements       :userstory:
:PROPERTIES:
:CREATED:  [2014-01-29 Wed 17:30]
:END:

- article mentions following:
: [[tsfile:2014-01-29 foo bar.png]]

- open questions

  - [X] how to tell width/height?
    - http://orgmode.org/worg/org-tutorials/images-and-xhtml-export.html
      : #+ATTR_HTML: alt="Zoomed image."
      : #+ATTR_HTML: width="300" style="border:2px solid black;"
      : #+ATTR_HTML: style="float:left;"
      : [[image]]
    - multiple attr-lines per image
      - RegEx: "#+ATTR_HTML: " followed by one or more "alt=[...]", "width=[...]", "height=[...]", "style=[...]"
      - alt -> write directly to alt attribute
      - width/height -> write directly to width/height attribute
      - style -> write directly to style attribute

  - [ ] create yasnippet file with attr line with drop-downs for
    common values
    - [ ] three standard-sizes?
      - small = xx em
      - medium = 50% textwidth
      - big = textwidth

  - [ ] scaling images -> probably future feature instead of here!
    - if scaled, add its size-identifier to original file name
      - "2014-01-29 file name.png" -> "42em/2014-01-29 file name - scaled 42em.png"
      - makes it possible to use same file with different scaling
        sizes

- procedure
  1. [ ] additional parameter of files.org_archive
  2. parse files.org_archive on first usage of tsfile link
     - RegEx: [FILENAME] (with brackets!)
     - create global look-up dict: filename -> path
  3. get file location
     - add as list element in dict "payload"
     - this makes multiple paths per item possible!
  4. error if file not found
     - probably: re-try alternative path if file was found multiple times
  5. in case of article:
     - put file in article folder
     - link locally (relative path)
  6. in case of non-article (persistent, tag, ...):
     - put file in global folder named "tsfile" in root
     - link wirh absolute path
** NEXT catch all exceptions and create a log entry           :architecture:
:PROPERTIES:
:CREATED:  [2013-08-29 Thu 16:28]
:END:

** NEXT Glossary: variable names and so on                    :architecture:
:PROPERTIES:
:CREATED:  [2013-10-14 Mon 12:34]
:END:

** NEXT Refactor: unify all variables according to glossary    :architecture:
:PROPERTIES:
:CREATED:  [2013-10-14 Mon 12:35]
:END:

** NEXT parse/htmlize: tables                                    :userstory:
:PROPERTIES:
:CREATED:  [2014-02-01 Sat 15:25]
:ID: 2014-08-10-implement-lb-tables
:END:

- http://orgmode.org/worg/dev/org-syntax.html#Tables

** NEXT fix tables in my current blog entries                     :userstory:
SCHEDULED: <2014-08-10 Sun>
:PROPERTIES:
:CREATED:  [2014-08-10 Sun 10:37]
:BLOCKER: 2014-08-10-implement-lb-tables
:END:

- id:2014-05-09-managing-digital-photographs
- id:apps-I-am-using

** NEXT htmlizer: generate more Org-mode elements             :architecture:
:PROPERTIES:
:CREATED:  [2013-10-19 Sat 19:19]
:END:

- also: search for FIXXMEs in htmlizer
  - I did some quick & dirty copying (quote, src, ...) in order to
    enable real-world data parsing
** NEXT include image files                                      :userstory:
:PROPERTIES:
:CREATED:  [2012-11-05 Mon 10:54]
:END:

- "lbimg:image.png"
  - works in Orgmode using custom link to valid folder
  - lazyblorg recognizes it and translates it to img

- show a fixed maximum width/height image
  - probably with a magnifying glass and a plus symbol in its lower
    right corner
- show the big version when clicking on it

- see Kr√∂ner2011 p.140ff for HTML5 and figure/caption

- handle old HTTP-ATTR lines and new Org-mode HTTP attributes

*** TODO research different Org-mode ways of defining including images
:PROPERTIES:
:CREATED:  [2012-11-05 Mon 10:55]
:END:

1. just link a file, do not show image
2. show the linked image directly
** NEXT [#C] CSS: if page is less than one page, place footer at bottom :userstory:
:PROPERTIES:
:CREATED:  [2014-01-31 Fri 23:56]
:END:
** NEXT [#C] research: Python Jinja as template system        :architecture:
:PROPERTIES:
:CREATED:  [2013-09-05 Thu 17:00]
:END:
** NEXT [#C] source code: replace pre with suitable environment  :userstory:
:PROPERTIES:
:CREATED:  [2014-01-30 Thu 16:11]
:END:

- htmlizer.py -> "## FIXXME: replace pre with suitable source code environment!"
** NEXT add "read more articles with tag FOOBAR" to bottom                                :userstory:
:PROPERTIES:
:CREATED:  [2014-10-25 Sat 21:56]
:END:
[2014-10-25 Sa. 09:22]
** TODO ID of sub-headings get stored and processed to anchors   :userstory:
:PROPERTIES:
:CREATED:  [2014-02-09 Sun 10:28]
:END:

- I want to
  - refer to any ID of any blog article heading or blog article
    sub-heading using the same method:
: [[id:any-id][anchor text]]

- lazyblorg has to be able to derive following according to any ID:
  - get the URL of a blog entry
  - get the ID/HREF of any sub-heading of any blog entry

** TODO mark updates on entries                                :architecture:
:PROPERTIES:
:CREATED:  [2012-11-05 Mon 10:50]
:END:

- heading gets a blog entry with a unique :ID:
- setting "Update 1/2/3/..." for each one of those:
: :LOGBOOK:
: - State "DONE"       from "NEXT"       [2011-10-07 Fri 15:40]
: :END:
- ALTERNATIVELY: set "Update YYYY-MM-DD for last one of those (from above)
- heading with known unique ID and no state DONE
  - should stay the same until state changes back to DONE
  - this requires something which remembers states
  - this requires keeping old entries

- body:
  - manual section:
    - Updates:
      1. YYYY-MM-DD: short description
      2. YYYY-MM-DD: short description

see also id:2012-11-06-ago-generating
** TODO add option to tweet title/url for new/updated articles   :userstory:
:PROPERTIES:
:CREATED:  [2013-10-20 Sun 18:37]
:END:

- e.g., publish new stuff on a "public-voit"-Twitter-account
  - probably there is a cloud service that translates RSS to Twitter?
  - probably more RSS-to-something-translators?

** TODO link to day in Wikipedia                                 :userstory:
:PROPERTIES:
:CREATED:  [2013-01-08 Tue 14:38]
:END:

- historic context
- YYYY-MM-DD -> links to Wikipedia-entries of days
  - https://en.wikipedia.org/wiki/Portal:Current_events/2010_August_26

** TODO auto-tag entries                                         :userstory:
:PROPERTIES:
:CREATED:  [2012-11-11 Sun 13:43]
:ID: 2012-11-11-autotags
:END:

- auto-tags are visually separated from manual tags to make it clear
  that they are automatically generated (and might be bogus sometime)
- [ ] add to about-page
- [ ] add to documentation (README, ...)

- feeds for auto-tags
  - [ ] feeds/lazyblorg-shorts.*
  - [ ] feeds/lazyblorg-deutsch.*
  - [ ] feeds/lazyblorg-english.*

*** Language
:PROPERTIES:
:CREATED:  [2012-11-11 Sun 13:44]
:END:

- lang-de, de, en, us, ... ?
- language tag is automatically derived
  - by guessing language based on common stopwords or external library

*** Length
:PROPERTIES:
:CREATED:  [2012-11-11 Sun 13:44]
:END:

- oneliners
  - below a certain threshold
- middlesize(sic?)
  - between oneliners and fullsizeentries
- fullsize(sic?)

*** Auto-Disclaimer
:PROPERTIES:
:CREATED:  [2012-11-15 Thu 11:47]
:END:

- hooks for :TAGS: (can be optional) or case-sensitive keywords in headings
- if found:
  - link to a special pre-defined page

- Example: if "What The World Needs"|"WTWN:" is found, link to a page
  where WTWN-series is described in general.
** TODO add tree of headings on each article with sub-headings   :userstory:
:PROPERTIES:
:CREATED:  [2014-02-08 Sat 11:06]
:END:

- probably in sidebar?
** TODO handle Org-mode priorities in heading                    :userstory:
:PROPERTIES:
:CREATED:  [2014-02-08 Sat 11:11]
:END:

Like "[#A]".

- possible ideas
  - ignore priorities
    - suppress!
  - convert into given tags ("important", ...)

** TODO [#B] CSS generated using Org/babel                    :architecture:
:PROPERTIES:
:CREATED:  [2012-12-13 Thu 10:08]
:END:

- css.org with Comments and css-blocks

#+BEGIN_SRC css
example-CSS content
#+END_SRC

- automatically extracting CSS code from that Org-mode file

- example: http://www.tbray.org/ongoing/When/201x/2011/04/21/Reflowing

backward compatibility for old browsers:
#+BEGIN_SRC css
section, article, header, footer, nav, aside, hgroup {
display: block;
}
#+END_SRC
** TODO [#B] format tables                                       :userstory:
:PROPERTIES:
:CREATED:  [2012-12-21 Fri 09:49]
:END:

- add JavaScript to be able to sort by column
- possible cnadidates for methods
  - http://tablesorter.com/docs/
  - HTML5 (?)
  - CSS: http://www.cssjuice.com/16-sortable-table-techniques/

- for lists
  - http://farhadi.ir/projects/html5sortable/

** TODO [#C] add frames to images                                :userstory:
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 11:27]
:END:

- example: http://www.tbray.org/ongoing/When/200x/2006/04/08/Picture-Frames
  - caution: that's Java

** TODO [#C] tags, tag cloud, tag descriptions                   :userstory:
:PROPERTIES:
:CREATED:  [2012-11-05 Mon 10:57]
:END:

- tag cloud for getting a quick overview on the blog itself
- a list of all tags on front page with link to tag-descriptions
- each tag gets a tag-description page
  - what I mean by this tag with examples
  - link to feed for this tag
  - link to a list of blog entries for this tag

- see also id:2012-11-11-autotags
** SOMEDAY add diff to previous version in case of update        :userstory:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2014-02-28 Fr 09:27]
:END:
:PROPERTIES:
:CREATED:  [2014-02-28 Fr 09:27]
:END:

- should be possible because lazyblorg stores old raw content and gets
  new one
- [ ] what happens in case of re-generation blog with old diffs?

** SOMEDAY [#C] Pre-search for new blog articles before invoking lazyblorg :userstory:
:LOGBOOK:
- State "SOMEDAY"    from "TODO"       [2014-02-01 Sat 15:36]
:END:
:PROPERTIES:
:CREATED:  [2013-10-20 Sun 18:34]
:END:

- do a "egrep '^\*+ .*:blog:' | wc -l" and compare with last number
  - if changed, run lazyblorg
  - if not changed, do nothing
- does not work when same number of blog articles get deleted as
  created in between
- probably add this to best practice or FAQs

** SOMEDAY add/create/include/handle short URLs for each entry   :userstory:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2013-08-20 Tue 10:56]
:END:
:PROPERTIES:
:CREATED:  [2013-08-20 Tue 10:56]
:END:

- e.g.:
  - www.example.com/blog/i/aB3 ->
  - www.example.com/i/aB3 ->
- generate short URL as hash from ID?
  - is it possible without getting a high chance of conflicts?
    - YES:
      - use 4-letter-part of sha1-hash
      - before storing, check on conflict with existing one
        - use creation-date as first-come-first-serve
        - in case of conflict: add more sha1-letters to short-URL

- [2013-08-29 Thu]: idea: www.example.com/s(.html)#ID
  - one (long) HTML page with links to all pages
    - large space between entries such that entries can not be mixed
      up (showing multiple entries the same time)
    - disadvantage: user has to click on the URL of the article
  - working: /index.shtml#realcontent
    - www.example.com/s.html#ID
  - working: /#realcontent
    - www.example.com/s/#ID
    - *shorter!*

** SOMEDAY Auto-tag: guessing language of entry                   :userstory:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2013-01-08 Tue 14:36]
:END:
:PROPERTIES:
:CREATED:  [2012-11-11 Sun 10:53]
:END:

- https://github.com/dsc/guess-language

** SOMEDAY fixed entries by using a tag                          :userstory:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2013-01-08 Tue 14:46]
:END:
:PROPERTIES:
:CREATED:  [2012-12-21 Fri 09:48]
:END:

- outside of YYYY/MM/DD-hierarchy
- e.g.
  - tools I use
  - books I read
  - ...
** SOMEDAY publish (only) free/busy times (in multiple formats)  :userstory:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2013-01-08 Tue 14:48]
:END:
:PROPERTIES:
:CREATED:  [2012-12-29 Sat 17:40]
:END:

** SOMEDAY CSS: round corners of images                          :userstory:
:LOGBOOK:
- State "SOMEDAY"    from "NEXT"       [2013-01-08 Tue 14:53]
:END:
:PROPERTIES:
:CREATED:  [2013-01-07 Mon 18:40]
:END:

- probably steal from http://www.tbray.org/ongoing/

** SOMEDAY [[http://tasker.dinglisch.net/][Tasker]]-script: share URL and send to my lazyblorg     :userstory:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2013-07-20 Sat 10:58]
:END:
:PROPERTIES:
:CREATED:  [2013-08-22 Thu 21:19]
:END:

- open questions
  - encryption
    - necessary? in the end, it gets public anyway :-)
  - prevent "content injection"
    - PKI: signing with private GnuPG-key of phone device?
      - DoS-attack still possible
        - sending a lot of fake messages
    - synchronous password?
    - ?
** SOMEDAY re-generate only necessary entries/pages            :architecture:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2013-08-22 Thu 21:19]
:END:
:PROPERTIES:
:CREATED:  [2013-08-22 Thu 21:19]
:END:

switch from "delete everything and re-generate everything on every
run" to "delete and re-generate only necessary entries/pages"

- [ ] adopt docstring of compare_blog_metadata()

** SOMEDAY [#C] in order not to parse *whole* content, split up parsing :architecture:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2013-08-21 Wed 11:58]
:END:
:PROPERTIES:
:CREATED:  [2013-08-21 Wed 11:58]
:END:

For optimizing performance and RAM usage: use *two parsing processes*:

  1. find new or updated articles
     - parse for used ID-links
     - collect and store metadata of these (everything except content)
     - print out warnings for all IDs that are broken links
     - create creative 404-page for all broken links in the meantime

  2. parse everything again and store only new or updated article contents
     - match with ID-links
** SOMEDAY [#C] do not parse HTML template file if unchanged  :architecture:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2013-08-26 Mon 19:41]
:END:
:PROPERTIES:
:CREATED:  [2013-08-26 Mon 19:41]
:END:

- not much of a performance difference
- only a nice-to-have

** SOMEDAY implement bookmark RSS in lazyblorg
:LOGBOOK:
- State "SOMEDAY"    from ""           [2014-01-20 Mon 19:33]
:END:
:PROPERTIES:
:CREATED:  [2014-01-20 Mon 19:33]
:END:
- [ ] handle public/private tags accordingly
- [ ] migrate delicious private field to private tag
* Notes                                                               :notes:

** Naming this project
:PROPERTIES:
:CREATED:  [2013-08-20 Tue 10:18]
:END:

lazyblorg - a mixture of lazy, blogging, blog, org-mode - emphasizes
the fact that the *user* of it may be very lazy. This relates to the
minimal effort she/he has to do in order to create a new blog entry.

There are no hits in [[https://www.google.com/#fp%3De12793cfcde69436&hl%3Den&nfpr%3D1&q%3Dlazyblorg&safe%3Doff][Google search for "lazyblorg"]]. However, there
are some for "lazyblog" (without the 'r').

- Other cool names would be:
  - invisiblorg
    - invisible, blog, org-mode
    - emphasizes the invisibility of the blog mechanism once it is
      set up
    - no hits for "[[https://www.google.com/#fp%3De12793cfcde69436&hl%3Den&nfpr%3D1&q%3Dinvisiblorg&safe%3Doff][invisiblorg]]" but some for "invisiblog" or "invisibl.org"
** Short descriptions of the Python modules/files
:PROPERTIES:
:CREATED:  [2013-08-22 Thu 21:24]
:END:

- lazyblorg.py
  - central module which uses all other modules
  - handles command line parameters
  - calls parser
  - gets template data
  - pushes data to htmlizer
- lib/utils.py
  - misc (static) tool-methods that are or might get handy for other
    modules as well
- lib/orgformat.py
  - borrowed from the [[https://github.com/novoid/Memacs][Memacs]] project
  - holds all kind of cool tool-methods to generate Org-mode stuff
    (time-stamps, ...)
- lib/orgparser.py
  - parses an Org-mode file and returns an internal representation of
    matching sections
- lib/htmlizer.py
  - responsible for everything between internal representation of blog
    stuff to create to their resulting files on the hard disk (HTML,
    CSS, ...)

** Implemented Org-mode Elements
:PROPERTIES:
:ID: implemented-org-elements
:CREATED:  [2014-03-03 Mon 20:49]
:END:

- http://orgmode.org/worg/dev/org-syntax.html
  - OLD: list of Org Mode elements: http://article.gmane.org/gmane.emacs.orgmode/67871
    - will get on Worg some day!

- an Org-mode test-file (for unit testing) containing all implemented
  Org-mode syntax elements: [[https://github.com/novoid/lazyblorg/blob/master/testdata/currently_supported_orgmode_syntax.org][testdata/currently_supported_orgmode_syntax.org]]

Org elements: from ox-ascii.el (Org-mode)

#+NAME: implemented-org-elements
| *Org Element*         | [fn:earmarked] | [fn:lowprio] | implemented since | [fn:internalrepresentation]                                        | *HTML5*                                                  |
|-----------------------+----------------+--------------+-------------------+--------------------------------------------------------------------+----------------------------------------------------------|
| external hyperlinks   |                |              | <2014-01-30 Thu>  |                                                                    | a                                                        |
| internal links        |                |              | <2014-03-03 Mon>  |                                                                    | a                                                        |
| bold                  |                |              | <2014-01-30 Thu>  |                                                                    | b                                                        |
| center-block          |                | x            |                   |                                                                    |                                                          |
| clock                 |                | x            |                   |                                                                    |                                                          |
| code                  |                |              | <2014-01-30 Thu>  |                                                                    | code                                                     |
| drawer                |                | x            |                   |                                                                    |                                                          |
| dynamic-block         |                | x            |                   |                                                                    |                                                          |
| entity                |                |              |                   |                                                                    |                                                          |
| example-block         |                |              | <2014-01-30 Thu>  | ['example-block', 'name or None', [u'first line', u'second line']] | FIXXME                                                   |
| example "colon-block" |                |              | <2014-08-10 Sun>  | ['colon-block', False, [u'first line', u'second line']]            | pre                                                      |
| export-block          |                | x            |                   |                                                                    |                                                          |
| export-snippet        |                | x            |                   |                                                                    |                                                          |
| fixed-width           |                | x            |                   |                                                                    |                                                          |
| footnote-definition   |                | x            |                   |                                                                    |                                                          |
| footnote-reference    |                | x            |                   |                                                                    |                                                          |
| headline              |                |              | <2014-01-30 Thu>  | ['heading', {'level': 3, 'title': u'my title'}]                    | section+header+h1                                        |
| horizontal-rule       |                |              | <2014-01-31 Fri>  | ['hr']                                                             | (ignored and only interpreted to mark end of standfirst) |
| inline-src-block      |                | x            |                   |                                                                    |                                                          |
| inlinetask            |                | x            |                   |                                                                    |                                                          |
| inner-template        |                | x            |                   |                                                                    |                                                          |
| italic                |                | x            |                   |                                                                    |                                                          |
| item                  |                |              |                   |                                                                    |                                                          |
| keyword               |                | x            |                   |                                                                    |                                                          |
| latex-environment     |                |              | <2014-01-30 Thu>  | ['latex-block', 'name or None', [u'first line', u'second line']]   | FIXXME                                                   |
| latex-fragment        |                | x            |                   |                                                                    |                                                          |
| line-break            |                | x            |                   |                                                                    |                                                          |
| link                  | x              |              |                   |                                                                    |                                                          |
| paragraph             |                |              | <2014-01-30 Thu>  | ['par', u'line1', u'line2']                                        | p                                                        |
| plain-list            | x              |              |                   | ['list-itemize', [u'first line', u'second line']]                  | ul+li                                                    |
| plain-text            |                |              | <2014-01-30 Thu>  | see: paragraph                                                     |                                                          |
| planning              |                | x            |                   |                                                                    |                                                          |
| quote-block           |                |              | <2014-01-30 Thu>  | ['quote-block', 'name or None', [u'first line', u'second line']]   | blockquote                                               |
| quote-section         |                | ?            |                   |                                                                    |                                                          |
| radio-target          |                | x            |                   |                                                                    |                                                          |
| section               |                |              | <2014-01-30 Thu>  | ['heading', {'title': u'Sub-heading foo', 'level': 3}]             | h2, h3, ...                                              |
| special-block         |                | x            |                   |                                                                    |                                                          |
| src-block             |                |              | <2014-01-30 Thu>  | ['src-block', 'name or None', [u'first line', u'second line']]     | pre                                                      |
| statistics-cookie     |                | x            |                   |                                                                    |                                                          |
| strike-through        |                | x            |                   |                                                                    |                                                          |
| subscript             |                | x            |                   |                                                                    |                                                          |
| superscript           |                | x            |                   |                                                                    |                                                          |
| table                 | x              |              |                   |                                                                    |                                                          |
| table-cell            | x              |              |                   |                                                                    |                                                          |
| table-row             | x              |              |                   |                                                                    |                                                          |
| target                |                |              |                   |                                                                    |                                                          |
| template              |                | x            |                   |                                                                    |                                                          |
| timestamp             |                | x            |                   |                                                                    |                                                          |
| underline             |                | x            |                   |                                                                    |                                                          |
| verbatim              | x              |              |                   |                                                                    | pre                                                      |
| verse-block           |                |              | <2014-01-30 Thu>  | ['verse-block', 'name or None', [u'first line', u'second line']]   | pre                                                      |
| html-block            |                |              | <2014-01-30 Thu>  | ['html-block', 'name or None', [u'first line', u'second line']]    | pre (if no #+NAME: then insert directly!)                |

NOTE: OrgParser is using "par" for anything it can not interpret as
something else.

[fn:earmarked] Planned to be implemented soon (or at all :-)

[fn:lowprio] This feature is low on my personal development list (way
take some time or might never get implemented)

[fn:internalrepresentation] usually in list: ~blog_data['id-of-entry']['content']~

- Blocks: (beginning with ~BEGIN_~)
  - [[http://orgmode.org/org.html#index-g_t_0023_002bBEGIN_005fASCII-1620][ASCII]]
  - [[http://orgmode.org/org.html#index-g_t_0023_002bBEGIN_005fHTML-1661][HTML]]
  - [[http://orgmode.org/org.html#index-g_t_0023_002bBEGIN_005fLATEX-1719][LATEX]]
  - [[http://orgmode.org/org.html#index-g_t_0023_002bBEGIN_005fQUOTE-1493][QUOTE]]
  - [[http://orgmode.org/org.html#index-g_t_0023_002bBEGIN_005fSRC-1885][SRC]]
  - [[http://orgmode.org/org.html#index-g_t_0023_002bBEGIN_005fVERSE-1492][VERSE]]


#+NAME: template-placeholders-and-their-processing
| *placeholder*                      | *description*                                      | gets sanitized | *source*                                                  |
|------------------------------------+----------------------------------------------------+----------------+-----------------------------------------------------------|
| #ARTICLE-TITLE#                    | heading/title of the blog article                  | x              | Org: heading                                              |
| #ARTICLE-ID#                       | id of the article                                  |                | PROPERTIES-drawer                                         |
| #ABOUT-BLOG#                       | a line of text which describes the blog in general |                | FIXXME                                                    |
| #BLOGNAME#                         | short name of the blog                             |                | FIXXME                                                    |
| #ARTICLE-YEAR#                     | four digit year of the article (folder path)       |                | Org: CREATED-time-stamp                                   |
| #ARTICLE-MONTH#                    | two digit month of the article (folder path)       |                | Org: CREATED-time-stamp                                   |
| #ARTICLE-DAY#                      | two digit day of the article (folder path)         |                | Org: CREATED-time-stamp                                   |
| #ARTICLE-PUBLISHED-HTML-DATETIME#  | time-stamp of publishing in HTML                   |                | Org: CREATED-time-stamp                                   |
| #ARTICLE-PUBLISHED-HUMAN-READABLE# | time-stamp of publishing in                        |                | Org: CREATED-time-stamp                                   |
| #TAGNAME#                          | string of a tag                                    |                | Org: tags of Org-heading                                  |
| #SECTION-TITLE#                    | title of the next heading/section                  | x              | Org: heading of Org sub-heading                           |
| #SECTION-LEVEL#                    | relative level of the next heading/section         |                | Org: level of heading - level of article + 1              |
| #PAR-CONTENT#                      |                                                    | x              | Org: content which is not recognized as something special |
| #A-URL#                            | URL of a hyperlink                                 |                | Org: Org-link                                             |
| #CONTENT#                          | description of the hyperlink                       |                | Org: Org-link                                             |
| #CONTENT#                          | text of the list item                              | x              | Org: item content of Org list                             |
| #NAME#                             | Org-mode name of a block                           |                | Org: #+NAME: declaration                                  |


#+NAME: template-elements-besides-org-elements
| *What*                | *template-name*         | *placeholder replacements*                                            |
|-----------------------+-------------------------+-----------------------------------------------------------------------|
| article               | article-header          | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|                       | article-header-begin    | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|                       | article-header-end      | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|                       | article-tags-begin      |                                                                       |
|                       | article-tag             | TAGNAME                                                               |
|                       | article-tags-end        | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|                       | article-footer          | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|                       | article-end             | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|                       | persistent-header       | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|                       | persistent-header-begin | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|                       | persistent-header-end   | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|                       | persistent-footer       | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|                       | persistent-end          | ARTICLE-TITLE, ABOUT-BLOG, BLOGNAME, ARTICLE-(ID,YEAR,MONTH,DAY,PUB*) |
|-----------------------+-------------------------+-----------------------------------------------------------------------|
| headline              | section-begin           | SECTION-TITLE, SECTION-LEVEL                                          |
|-----------------------+-------------------------+-----------------------------------------------------------------------|
| paragraph, plain-text | paragraph               | PAR-CONTENT                                                           |
|-----------------------+-------------------------+-----------------------------------------------------------------------|
| URLs                  | a-href                  | A-URL, CONTENT                                                        |
|-----------------------+-------------------------+-----------------------------------------------------------------------|
| plain-list            | ul-begin                |                                                                       |
|                       | ul-item                 |                                                                       |
|                       | ul-end                  |                                                                       |
|-----------------------+-------------------------+-----------------------------------------------------------------------|
| pre-fromatted text    | pre-begin               |                                                                       |
|                       | pre-end                 |                                                                       |
|-----------------------+-------------------------+-----------------------------------------------------------------------|
| html-block            | html-begin              | NAME                                                                  |
|                       | html-end                |                                                                       |
| src-block             | src-begin               |                                                                       |
|                       | src-end                 |                                                                       |
|                       | named-src-begin         |                                                                       |
|                       | named-src-end           |                                                                       |




** Representation of blog data
CLOSED: [2013-08-20 Tue 18:15]
:LOGBOOK:
- State "DONE"       from "STARTED"    [2013-08-20 Tue 18:15]
:END:
:PROPERTIES:
:CREATED:  [2013-05-21 Tue 15:26]
:ID: blog_data
:END:

For a complete list of *content elements*, please take a look at
id:implemented-org-elements (above)

~blog_data~ is a Python list containing one dictionary entry per blog entry:

- FIXXME: add examples of:
  - category
  - other additional data

#+BEGIN_SRC python
  blog_data = \
  [ {'level': 2,                                                ## number of asterisks
     'title': u'This is a blog entry about foo', 
     'tags': [u'tag1', u'tag2'], 
     'id': u'lazyblorg-example-entry',                          ## ID from PROPERTIES-drawer
     'finished-timestamp-history': [datetime1, datetime2, datetime3],
     'timestamp': datetime,                                    ## most current time-stamp
     'created: datetime,
     'content': [ ['par', u'This is the Org-mode content'],    ## 'par: paragraph containing anything that is not defined like tables, ...
                  '\n',    ## change of paragraph
                  ['heading', {'level': 3, 'title': u'Another aspect'}],  
                  ['html-block', 'its name or None', [u'first line', u'second line', u'', u'last line']],
                  ['list-itemize', [u'first line', u'second line']],
                  ['table', u'followed by this table data'],         #FIXXME: table syntax
                  ['image', u'followed by this image']               #FIXXME: image syntax
                ]                                                    #FIXXME: further elements
  } ]
#+END_SRC

Thus:
#+BEGIN_SRC python
blog_data[0].keys()
## ... results in:
# ['title',
#  'timestamp',
#  'created',
#  'tags',
#  'content',
#  'finished-timestamp-history',
#  'level',
#  'id']

blog_data[0]['content']  ## -> list of elements of content
# [['text', u'This is the Org-mode content'],
#  ['heading', {'level': 3, 'title': u'Another aspect'}],
#  ['list-itemize', [u'first line', u'second line']],
#  ['table', u'FIXXME: followed by this table data'],
#  ['image', u'FIXXME: followed by this image']]
#+END_SRC
** Internal format of meta-data 
:PROPERTIES:
:CREATED:  [2013-08-22 Thu 21:08]
:END:

Example:
#+BEGIN_EXAMPLE
>>> metadata
{u'2013-08-22-testid': {'timestamp': datetime.datetime(2013, 8, 22, 21, 6), 'checksum': 'b757f8478bffd6c70a474f213d6520de', 'created': datetime.datetime(2013, 8, 22, 21, 6)}, 
 u'2013-02-12-lazyblorg-example-entry': {'timestamp': datetime.datetime(2013, 2, 14, 19, 2), 'checksum': '24af2246a5121e829a0dbbd6e2425c15', 'created': datetime.datetime(2013, 2, 12, 10, 58)}}
#+END_EXAMPLE

Keys of the dict: IDs of the entries:
#+BEGIN_EXAMPLE
>>> metadata.keys()
[u'2013-08-22-testid', u'2013-02-12-lazyblorg-example-entry']
#+END_EXAMPLE

One entry with key=ID holds a dict with following entries:
- 'timestamp': datetime.datetime(2013, 8, 22, 21, 6)
  - most recent time-stamp from the LOGBOOK drawer which marked going
    to a final state
- 'checksum': 'b757f8478bffd6c70a474f213d6520de'
  - md5 check-sum of: [title, tags, finished_timestamp_history, content]
- 'created': datetime.datetime(2013, 8, 22, 21, 6)
  - datetime object of the CREATED property from the PROPERTY drawer
  - [ ] FIXXME: why not the first CLOSED time-stamp?
** Time-stamps
:PROPERTIES:
:CREATED:  [2014-02-01 Sat 20:04]
:ID: 2014-02-01-time-stamps
:END:

Example:

: CLOSED: [2014-01-31 Fri 14:02]
: :LOGBOOK:
: - State "DONE"       from "DONE"       [2014-02-01 Sat 18:42]
: - State "DONE"       from ""           [2014-01-30 Thu 14:02]
: :END:
: :PROPERTIES:
: :CREATED:  [2014-01-28 Tue 14:02]
: :ID: 2014-01-27-lb-tests
: :END:

What happens with the various time-stamps?

- most recent LOGBOOK entry of setting to DONE:
  - added to entry['finished-timestamp-history'] (which is a list)
  - overwrites entry['timestamp'] if is newer than the old one
    - entry['timestamp'] is the most recent LOGBOOK entry of setting
      to DONE
- CREATED:
  - entry['created']
- CLOSED:
  - ignored
- ID-timestamp:
  - ignored

After parsing entry from above:

- entry['created'] = [2014-01-28 Tue 14:02]
- entry['timestamp'] = [2014-02-01 Sat 18:42]
- entry['finished-timestamp-history'] = [2014-02-01 Sat 18:42] and
  [2014-01-30 Thu 14:02]

Oldest entry of entry['finished-timestamp-history'] is the publication time-stamp!


** Development Schedule
:PROPERTIES:
:CREATED:  [2012-11-05 Mon 10:59]
:END:

this is the plan (from 2012-11):

- manually generate demo prototype
  - very basic Org-mode example file containing everything from below
  - HTML5 entry page
  - CSS2 style
  - HTML5 blog entry page
  - Tag description page
  - feed
  - HTML5 blog entry page with update
  - Index overview page (archive)
  - description of basic work-flow for generating the blog
    - user point of view
    - system point of view
- refine and test design and features of prototype
  - ask for feedback
  - play around, break things
- development
  - define order of Org-mode items (headings, lists, images, ...) implementation priority
  - define even more basic (Org-mode, HTML) from above
  - very basic unit-tests from prototype files (Org-mode, HTML)
  - test and refine work-flow for (re-)generating the blog
  - implement more and more Org-mode items

** Wishlist without compromises
:PROPERTIES:
:ID: 2012blogwishlist-copy
:CREATED:  [2013-01-07 Mon 18:40]
:END:

NOTE: if entries are marked as done in this section, they are not
implemented but moved to a (separate) user-story above.

- [X] Workflow to create a blog entry
  - make sure that there is an (uniq) :ID: property
  - add tag :blog: to heading
  - write content, subheadings, ...
  - change state of top-heading to DONE
  - (manually) invoke generation-script

- usage of only very basic markup
  - [X] paragraphs (p)
  - [X] headings (h1..n)
  - [X] http-references (a href)
  - [ ] lists (ul)
  - [X] quote (verbatim)
  - [ ] images (img)
  - [ ] tables
  - [X] inline-HTML
  - [ ] internal links to other entries

- advantages
  - a blog entry can be located anywhere in all of my Orgmode files
  - no extra formatting steps
  - very small overhead to create a blog entry
  - no duplicate information
    - update only in Orgmode, not HTML or any in-between format
  - static (fast) pages
  - self-hosting without any fancy services behind like RDBS

- open issues
  - [X] comments
    - simplest form: generate unique Email link and add at bottom
      - very easy to be done for catch-all MTAs
      - automatically derive whitelist for MTA to avoid old spam
    - simple HTML form
      - POST to script, adding comment to my inbox.org (containing
        link to ID)
    - disqus: I do not want to outsource comment hosting :-(
  - [ ] how to include and format graphics?
    - sometimes, I e.g. want to have an image aligned right with text
      flowing around it
  - [-] probably: usage of in-between format like ikiwiki
    - Orgmode syntax -> ikiwiki markup (markdown?) -> usual
      ikiwiki-workflow
      - should be not much effort since prerequisites limit to few
        markup things
    - benefits from not having to re-implement many things
    - in-between-format HTML (like Manoj uses) is way too complicated
      causing misc potential error sources

- [ ] basic script workflow
  - find all headings with state DONE and tag :blog:
    - optionally: add all other tags starting with "blog-" as blog tags
  - one entry starts at such a heading until EOF OR same or less level
    heading is found
  - compare raw text and IDs with last run
    - known ID, raw text unchanged: ignore, no change
    - new ID
      - generate new blog entry
        - extract YYYY-MM-DD from LOGBOOK-drawer (first *->DONE transformation)
        - generate YYYY/MM/DD-folder structure in blog accordingly
        - generate sanitized blog title as file name
    - known ID, raw text differs
      - generate update of existing entry
        - add "(Update n)" (with n is the n-th update) to entry title
          - optionally: add this also to URL
            - disadvantage: broken old URLs
            - advantage: URL reflects update state
  - on any activity:
    - re-write feed for last n entries
    - optionally: generate overview page for last n entries
    - optionally: generate calendar archive page(s)
    - optionally: generate tag overview page(s)
  - on any error:
    - create an orgmode event from current time that appears on agenda
    - with daily repeat -> so it gets noticed on the next day(s) too
    - in the description of that entry:
      - babel-sh-snippet with prepared command to re-try the run :-)

** Original post (How this all started)

Copied from: http://article.gmane.org/gmane.emacs.orgmode/49747/
#+BEGIN_QUOTE
Hi!

I got a nice idea on how a very easy to use Org-mode blog system
should look like.

Currently, I am using Serendipidy with web-based editor to write
HTML. Org-mode enabled me to write blog entries and export it to
HTML. Then I paste the HTML and have to modify minor things (images,
...) a bit. I guess the time from finishing the Org-mode entry to
the final blog entry is approximately ten to twenty minutes.

Overall, I do not want to do this process when I just want to
quickly write a view paragraphs within a couple of minutes. I need
a workflow with much less annoying overhead.

Therefore I sat down and thought about a workflow that should be
enough for writing simple weblog entries:

  - create an Org-mode heading (anywhere!)
  - make sure that there is an (uniq) :ID: property
  - add the tag :blog: to heading
  - <write content, subheadings, ...>
  - change state of top-heading to DONE
    - this enables blog entries ¬´in the queue¬ª
  - (manually) invoke generation-script

This enables me quick blogging with a list of advantages:

  - a blog entry can be located anywhere in all of my Orgmode files
  - no extra formatting steps
  - very small (almost non-existent) overhead to create a blog entry
  - no duplicate information
    - updates only in Orgmode, not HTML or any in-between format
  - static (fast) pages
  - self-hosting without any fancy services behind like RDBS

What do you think of my ideas so far?

Of course, I looked into existing solutions and found those:

  - http://orgmode.org/worg/org-blog-wiki.html
    - cool overview page for various solutions
  - http://orgmode.org/worg/blorgit.html
    - pretty complex set up :-(
    - I do not need a web-interface to edit Org-mode files
    - seem to have ¬´different¬ª use cases
  - http://orgmode.org/worg/org-tutorials/org-jekyll.html
    - uses HTML as in-between format; seems to provide many error
      possibilities(?)
    - converting whole files only (not desired)
    - have to try it someday
  - http://emacs-fu.blogspot.com/2009/05/writing-and-blogging-with-org-mode.html
    - uses only HTML export
  - http://blog.herraiz.org/archives/241
    - uses only HTML export
  - https://github.com/chrismgray/ikiwiki-org-plugin
    - promising but only one part of a possible solution

So nothing offers the features and small footprint as my idea above
:-(

With some prerequisites, it should not be that hard to even
implement it by myself:

  - usage of only very basic markup
    - paragraphs (p)
    - headings (h1..n)
    - http-references (a href)
    - lists (ul)
    - images (img)
    - quote (verbatim)

Still there are some open issues:

  - comments
    - simplest form: generate unique Email link and add at bottom
      - very easy to be done for catch-all MTAs
      - automatically derive whitelist for MTA to avoid old spam
    - simple HTML form
      - POST to script, adding comment to my inbox.org (containing
        link to ID)
    - disqus: I do not want to outsource comment hosting :-(
  - how to include and format graphics?
    - sometimes, I e.g. want to have an image aligned right with text
      flowing around it
  - probably: usage of in-between format like ikiwiki
    - Orgmode syntax -> ikiwiki markup (markdown?) -> usual
      ikiwiki-workflow
      - should be not much effort since prerequisites limit to few
        markup things
    - benefits from not having to re-implement many things
    - in-between-format HTML (like Manoj uses) is way too complicated
      causing misc potential error sources

The basic script workflow is not that complicated:

  - find all headings with state DONE and tag :blog:
    - optionally: add all other tags starting with "blog-" as blog tags
  - one entry starts at such a heading until EOF OR same or less level
    heading is found
  - compare raw text and IDs with last run
    - known ID, raw text unchanged: ignore, no change
    - new ID
      - generate new blog entry
        - extract YYYY-MM-DD from LOGBOOK-drawer (first *->DONE transformation)
        - generate YYYY/MM/DD-folder structure in blog accordingly
        - generate sanitized blog title as file name
    - known ID, raw text differs
      - generate update of existing entry
        - add "(Update n)" (with n is the n-th update) to entry title
          - optionally: add this also to URL
            - disadvantage: broken old URLs
            - advantage: URL reflects update state
  - on any activity:
    - re-write feed for last n entries
    - optionally: generate overview page for last n entries
    - optionally: generate calendar archive page(s)
    - optionally: generate tag overview page(s)

#+END_QUOTE

** Other Org-mode parsers or Org-to-HTML blog methods
:PROPERTIES:
:CREATED:  [2014-02-25 Tue 19:41]
:END:

- http://orgmode.org/worg/org-blog-wiki.html
  - very good summary of all possible tools
    - Should I mention that lazyblorg beats them all? No, you're
      right - this is really obvious; silly me.
- http://orgmode.org/worg/org-web.html
  - list of web pages done with Org-mode

Some notes of stuff I was looking into as well:

- https://bazaar.launchpad.net/~washort/+junk/pyporgan/files/head:/pyporgan/
  - very clean
  - parses only structure -> very basic
- https://github.com/bjonnh/PyOrgMode
  - very basic

- http://atlanis.net/blog/posts/new-site-stasis.html
  - a description on how to use Stasis to generate HTML from Org-mode

- Org-mode > Octopress > Jekyll > HTML:
  - http://www.railsonmaui.com/blog/2014/03/05/octopress-setup-with-github-and-org-mode-v2/

* Local Variables                                                  :noexport:
# Local Variables:
# mode: auto-fill
# End:
