# Time-stamp: <2013-08-07 20:11:03 vk>
# -*- coding: utf-8 -*-
* header information                                               :noexport:
:PROPERTIES:
:CREATED:  [2013-01-08 Tue 14:24]
:END:

#+TITLE:     lazyblorg development informations and issue tracker
#+AUTHOR:    Karl Voit
#+EMAIL:     tools@Karl-Voit.at
#+DATE:
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:

#+STARTUP: hidestars

#+STARTUP: overview   (or: showall, content, showeverything)
http://orgmode.org/org.html#Visibility-cycling

#+TODO: TODO(t) NEXT(n) STARTED(s) WAITING(w@/!) SOMEDAY(S!) | DONE(d!/!) CANCELLED(c@/!)
http://orgmode.org/org.html#Per_002dfile-keywords

#+TAGS: { wish(w) bug(b) userstory(u) inconsistency(i) question(q) architecture(a) tests(t) }
http://orgmode.org/org.html#Setting-tags


* Issue Tracking                                                     :issues:
:PROPERTIES:
:VISIBILITY: children
:CREATED:  [2013-01-08 Tue 14:26]
:END:

NOTE: Some issues that are marked as DONE or CANCELED are moved to the
corresponding archive-file "lazyblorg.org_archive".

** DONE setting up test entry and resulting data                     :tests:
CLOSED: [2013-02-12 Tue 14:13] SCHEDULED: <2013-02-12 Tue>
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-02-12 Tue 14:13]
:END:
:PROPERTIES:
:CREATED: [2012-04-17 Tue 14:08]
:END:

- my local copy:
  - file:///home/vk/src/lazyblorg/testdata/full_test/blog/2013/02/12/lazyblorg-example-entry/index.html
- http://www.w3schools.com/tags/default.asp

- [X] Org-mode example files
  - containing non blogging content *and* headings marked with ":blog:" tag
  - containing the string ":blog:" as non-tag
  - containing org-mode blog entries in different hierarchy depth
- [X] containing elements:
  - headings 1-3
  - paragraphs
  - external links (URLs)
  - itemize-list
  - verse-block
  - no images yet
- [X] corresponding resulting HTML(5) files
  - meaning of HTML5 elements: [[http://stackoverflow.com/questions/4781077/html5-best-practices-section-header-aside-article-tags/6527766#6527766][short overview on stackoverflow]]
    - small: small print for legalese, or terms and conditions
    - em: emphasizing
    - header: on top of document or "section"; defined by its content
      (not position)
    - footer: at bottom of document or "section"; contains
      information about containing elements
    - aside: side bar; defined by content, not position; for related
      information; e.g., pullquotes
    - nav: major navigation information
    - article: content that would probably go together for RSS feed
    - section: content that is grouped; consider "header", "footer",
      "nav", "sidebar", "article" as special kind of sections
    - hgroup: grouping headings (for overview/index)
    - date/time:
      - <time datetime="17:00">5pm</time>
      - <time datetime="2010-04-07">April 7th</time>
      - <time datetime="2010-04-07T17:00">5pm on April 7th</time>
      - <time>5pm on April 7th</time>
      - "pubdate" attribute has been removed from the standard and is
        considered invalid on http://html5.validator.nu/
- no CSS yet

** DONE [#A] define (link) structure of blog entries                 :tests:
CLOSED: [2013-02-12 Tue 14:11]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-02-12 Tue 14:11]
:END:
:PROPERTIES:
:CREATED: [2012-07-22 Sun 17:29]
:END:

- http://karl-voit.at/2012/07/22/example-entry/
with:
- "2012", "07", "22" being index pages (archive) containing links to all
  underlying blog entries
- "example-entry" is grabbed out of :ID: property
  - if :ID: is like "2012-07-22-example-entry" the date will be
    removed
  - if :ID: does not start with "YYYY-MM(-DD)" it gets used right away
  - user has to make sure that IDs are unique over all entries!

- http://karl-voit.at/blog/2012/11/31/This_is_the_title/index.html -> URL of
  entry; title gets parsed from heading title or ID
- http://karl-voit.at/blog/2012/11/31/ -> link to monthly overview (currently)
- http://karl-voit.at/blog/2012/11/ -> overview over the month
- http://karl-voit.at/blog/2012/ -> overview over the year
- http://karl-voit.at/blog/ -> blog starting page

- example: http://www.tbray.org/ongoing/misc/Colophon

** DONE sketch article layout                                    :userstory:
CLOSED: [2013-02-14 Thu 16:44]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-02-14 Thu 16:44]
:END:
:PROPERTIES:
:CREATED:  [2013-02-14 Thu 16:39]
:END:

#+BEGIN_VERSE

MyBlog > 2013 > 02 > 14                               Published: 2013-02-14 T 16:40

               This is my Title About Something                Tag1 Foo Bar lang:en

    <article body text>




About this Blog                                                      check HTML/CSS
#+END_VERSE

- Breadcrumbs: gray
- Published...: gray
- Title(s): dark turquoise
- Tags: gray
- body: black
- About this: gray, small
- check ...: gray, small
- background: bright yellowish with possible gradient from dark (top)
  to bright (bottom)

** DONE sketch ArticleOrgEntry                                :architecture:
CLOSED: [2013-02-15 Fri 20:00]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-02-15 Fri 20:00]
:END:
:PROPERTIES:
:CREATED:  [2013-02-15 Fri 19:58]
:END:

- holds current articles parsed from Org-mode files

- ArticleOrgEntry
  - NodeList
    - first entry contains main heading
    - other entries are at least one level deeper
  - TagList
  - Title
  - ID
  - TimeCreated
  - Checksum

** DONE sketch ArticleDBEntry                                 :architecture:
CLOSED: [2013-02-15 Fri 20:00]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-02-15 Fri 20:00]
:END:
:PROPERTIES:
:CREATED:  [2013-02-15 Fri 19:59]
:END:

- holds list of article metadata from previous run(s)

- ArticleOrgEntry
  - NodeList
    - first entry contains main heading
    - other entries are at least one level deeper
  - TagList
  - Title
  - ID
  - TimeCreated
  - Checksum

** DONE find Python checksum algorithm                        :architecture:
CLOSED: [2013-02-15 Fri 20:06]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-02-15 Fri 20:06]
:END:
:PROPERTIES:
:CREATED:  [2013-02-15 Fri 20:03]
:ID: 2013-02-15-checksum
:END:

- http://docs.python.org/2/library/hashlib.html#module-hashlib
- http://code.wikia.com/wiki/SHA_checksum#Python
- https://en.wikipedia.org/wiki/Cryptographic_hash_function#Cryptographic_hash_algorithms

- sha1 seems a good choice

example:
#+BEGIN_SRC python
import hashlib
converted = hashlib.sha1("My text").hexdigest()
#+END_SRC

- checksum over:
  - data['title']
  - data['timestamp']
  - data['tags']
  - data['content']

** STARTED implement basic workflow stub                      :architecture:
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 10:37]
:END:

- no working version, only workflow stub, which will be filled with
  the actual code later on

invoking source code:
#+BEGIN_VERSE
vk@gary ~/src/lazyblorg (git)-[master] % PYTHONPATH="~/src/lazyblorg:" ./lazyblorg.py testdata/manual_prototype/org/test.org --targetdir testdata/2del -v
DEBUG    2013-05-20 17:58:02,643 extracting list of Org-mode files ...
DEBUG    2013-05-20 17:58:02,643 len(args) [1]
DEBUG    2013-05-20 17:58:02,643 1 filenames found: [testdata/manual_prototype/org/test.org]
DEBUG    2013-05-20 17:58:02,643 iterate over files ...
DEBUG    2013-05-20 17:58:02,644 OrgParser: doing file "testdata/manual_prototype/org/test.org" ...
DEBUG    2013-05-20 17:58:02,644 OrgParser: finished on file "testdata/manual_prototype/org/test.org"
DEBUG    2013-05-20 17:58:02,644 successfully finished.
vk@gary ~/src/lazyblorg (git)-[master] %
#+END_VERSE

- [X] find all headings with state DONE and tag :blog:
  - optionally: add all other tags starting with "blog-" as blog tags
- [X] one entry starts at such a heading until EOF OR same or less level
  heading is found
- [ ] create checksum (see id:2013-02-15-checksum)
  - data['title']
  - data['timestamp']
  - data['tags']
  - data['content']
- [ ] compare raw text and IDs with last run
  - known ID, raw text unchanged: ignore, no change
  - new ID
    - generate new blog entry
      - extract YYYY-MM-DD from LOGBOOK-drawer (first *->DONE transformation)
      - generate YYYY/MM/DD-folder structure in blog accordingly
      - generate sanitized blog title as file name
  - known ID, raw text differs
    - generate update of existing entry
      - add "(Update n)" (with n is the n-th update) to entry title
        - optionally: add this also to URL
          - disadvantage: broken old URLs
          - advantage: URL reflects update state
        - ALTERNATIVELY: add "(Update YYYY-MM-DD)" instead of number
          - numbers don't mean anything
- on any activity:
  - [ ] re-write RSS feed for last n entries
  - [ ] optionally: generate overview page for last n entries
  - [ ] optionally: generate calendar archive page(s)
  - [ ] optionally: generate tag overview page(s)
- on any error:
  - [ ] create an orgmode event from current time that appears on agenda
  - [ ] with daily repeat -> so it gets noticed on the next day(s) too
  - [ ] in the description of that entry:
    - babel-sh-snippet with prepared command to re-try the run :-)

- in order not to store *all* content while parsing, split up parsing
  to two parsing processes:
  1. find new or updated articles
     - parse for used ID-links
     - collect and store metadata of these (everything except content)
     - print out warnings for all IDs that are broken links
     - create creative 404-page for all broken links in the meantime
  2. parse everything again and store only new or updated article contents
     - match with ID-links

** TODO Idea: do paragraph parsing                            :architecture:
:PROPERTIES:
:CREATED:  [2013-02-27 Wed 16:48]
:END:

- paragraphs are separated by at least one empty line OR they end
  with a line starting with:
  - »#+«
- each paragraph is handled separately BUT paragraphs of an
  environment are being combined
- for each normal text paragraph:
  - remove \n
  - sanitize
    - insert lazyblorg-specific links
    - HTMLize with ...
      - either simple with own code OR
        - fast
        - only a few syntax elements can be parsed
      - using Org-mode exporter methods
        - slow
        - complicated set-up
        - supports everything which is supported by the Org-mode HTML
          export
    - if simple HTMLizer chosen:
      - re-insert \n for first space after 80 characters

Documentation:
- clearly state that lazyblorg does support *no org-mode syntax*
  except <list-of-supported-elements-and-their-context>

** TODO create template files for HTML snippets               :architecture:
:PROPERTIES:
:CREATED:  [2013-03-13 Wed 10:21]
:END:

- lazyblorg/templates/article.org

- Org-mode format "header"
- HTML src block with actual template
- #LB-TITLE# -> title
- #LB-AUTHOR# -> Authors name
- and so on

** TODO create unit test for comparing output files                  :tests:
:PROPERTIES:
:CREATED:  [2013-02-14 Thu 17:28]
:END:

- example: https://github.com/bjonnh/PyOrgMode/blob/master/test.py

*** Idea: parse content test cases from Org file

A file like «tests.org» contains test cases, each one in a
heading. if it starts with «test: » it is a test case followed by its
test name.

A sub-heading «Org» contains the Org-mode document/snippet which gets
parsed.

A sub-heading «result» contains the results which is expected.
** NEXT CSS: manually create CSS for an entry                 :architecture:
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 14:14]
:END:

** NEXT paper: sketch main page                                   :userstory:
:PROPERTIES:
:CREATED:  [2013-02-14 Thu 16:39]
:END:
** NEXT HTML: manually create main jumping page                :architecture:
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 12:24]
:END:

- HTML5-example: see Kröner2011 p.123ff

** NEXT HTML: manually create month overview page                   :architecture:
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 14:12]
:END:

** NEXT HTML: manually create day overview page                     :architecture:
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 14:11]
:END:

** NEXT HTML: manually create year overview page                    :architecture:
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 14:12]
:END:

** TODO logs: lazyblorg-log.org                                :architecture:
:PROPERTIES:
:CREATED:  [2013-01-12 Sat 13:43]
:END:

format example:
: * lazyblorg logs                                         :lazyblorg:BLOGNAME:
: ** [2013-01-12 Sat 13:44] lazyborg-run started
: 2013-01-12 Sat 13:44 do this
: 2013-01-12 Sat 13:45 did that
: *** <2013-01-12 Sat 13:46> ERROR: error description
: *** <2013-01-12 Sat 13:46> WARNING: error description

** TODO [#B] CSS generated using Org/babel                    :architecture:
:PROPERTIES:
:CREATED:  [2012-12-13 Thu 10:08]
:END:

- css.org with Comments and css-blocks

#+BEGIN_SRC css
example-CSS content
#+END_SRC

- automatically extracting CSS code from that Org-mode file

- example: http://www.tbray.org/ongoing/When/201x/2011/04/21/Reflowing

backward compatibility for old browsers:
#+BEGIN_SRC css
section, article, header, footer, nav, aside, hgroup {
display: block;
}
#+END_SRC

** TODO [#C] Date in heading = link to day in Wikipedia          :userstory:
:PROPERTIES:
:CREATED:  [2013-01-08 Tue 14:38]
:END:

- YYYY-MM-DD -> links to Wikipedia-entries of days
  - https://en.wikipedia.org/wiki/Portal:Current_events/2010_August_26

** TODO mark updates on entries                                :architecture:
:PROPERTIES:
:CREATED:  [2012-11-05 Mon 10:50]
:END:

- heading gets a blog entry with a unique :ID:
- setting "Update 1/2/3/..." for each one of those:
: :LOGBOOK:
: - State "DONE"       from "NEXT"       [2011-10-07 Fri 15:40]
: :END:
- ALTERNATIVELY: set "Update YYYY-MM-DD for last one of those (from above)
- heading with known unique ID and no state DONE
  - should stay the same until state changes back to DONE
  - this requires something which remembers states
  - this requires keeping old entries

- body:
  - manual section:
    - Updates:
      1. YYYY-MM-DD: short description
      2. YYYY-MM-DD: short description

see also id:2012-11-06-ago-generating
** TODO include image files                                       :userstory:
:PROPERTIES:
:CREATED:  [2012-11-05 Mon 10:54]
:END:

- "lbimg:image.png"
  - works in Orgmode using custom link to valid folder
  - lazyblorg recognizes it and translates it to img

- show a fixed maximum width/height image
  - probably with a magnifying glass and a plus symbol in its lower
    right corner
- show the big version when clicking on it

- see Kröner2011 p.140ff for HTML5 and figure/caption

*** TODO research different Org-mode ways of defining including images
:PROPERTIES:
:CREATED:  [2012-11-05 Mon 10:55]
:END:

1. just link a file, do not show image
2. show the linked image directly
** TODO format tables                                            :userstory:
:PROPERTIES:
:CREATED:  [2012-12-21 Fri 09:49]
:END:

- add JavaScript to be able to sort by column
- possible cnadidates for methods
  - http://tablesorter.com/docs/
  - HTML5 (?)
  - CSS: http://www.cssjuice.com/16-sortable-table-techniques/

- for lists
  - http://farhadi.ir/projects/html5sortable/

** TODO add frames to images                                     :userstory:
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 11:27]
:END:

- example: http://www.tbray.org/ongoing/When/200x/2006/04/08/Picture-Frames
  - caution: that's Java

** TODO provide RSS feed(s)                                      :userstory:
:PROPERTIES:
:CREATED:  [2012-11-05 Mon 10:57]
:END:

- sorted by last date within LOGBOOK or PROPERTIES drawers
- one general RSS feed
- one feed for each tag

** TODO tags, tag cloud, tag descriptions                        :userstory:
:PROPERTIES:
:CREATED:  [2012-11-05 Mon 10:57]
:END:

- tag cloud for getting a quick overview on the blog itself
- a list of all tags on front page with link to tag-descriptions
- each tag gets a tag-description page
  - what I mean by this tag with examples
  - link to RSS feed for this tag
  - link to a list of blog entries for this tag

- see also id:2012-11-11-autotags

** TODO auto-tag entries                                         :userstory:
:PROPERTIES:
:CREATED:  [2012-11-11 Sun 13:43]
:ID: 2012-11-11-autotags
:END:

- auto-tags are visually separated from manual tags to make it clear
  that they are automatically generated (and might be bogus sometime)

*** Language
:PROPERTIES:
:CREATED:  [2012-11-11 Sun 13:44]
:END:

- lang-de, de, en, us, ... ?
- language tag is automatically derived
  - by guessing language based on common stopwords or external library

*** Length
:PROPERTIES:
:CREATED:  [2012-11-11 Sun 13:44]
:END:

- oneliners
  - below a certain threshold
- middlesize(sic?)
  - between oneliners and fullsizeentries
- fullsize(sic?)

*** Auto-Disclaimer
:PROPERTIES:
:CREATED:  [2012-11-15 Thu 11:47]
:END:

- hooks for :TAGS: (can be optional) or case-sensitive keywords in headings
- if found:
  - link to a special pre-defined page

- Example: if "What The World Needs"|"WTWN:" is found, link to a page
  where WTWN-series is described in general.
** TODO Decision algorithm for generating entries             :architecture:
:PROPERTIES:
:CREATED:  [2012-11-06 Tue]
:ID: 2012-11-06-ago-generating
:END:

| *case* | *ID*      | *created*    | *last_update*   | *checksum*   | *result*                     | *description*                    |
|--------+-----------+--------------+-----------------+--------------+------------------------------+----------------------------------|
|      1 | not found | DC           | DC              | DC           | WARNING                      | blog-entry without ID            |
|      2 | not known | DC           | DC              | DC           | generate; RSS                | 1st time generation              |
|      3 | known     | not found    | DC              | DC           | WARNING                      | blog-entry without CREATED       |
|      4 | known     | not matching | DC              | DC           | ERROR                        | CREATED should not change        |
|      5 | known     | matching     | same as CREATED | matching     |                              | not changed since 1st generation |
|      6 | known     | matching     | unchanged       | matching     |                              | not changed since last update    |
|      7 | known     | matching     | unchanged       | not matching | generate; noRSS; noIncrement | silent update                    |
|      8 | known     | matching     | changed         | not matching | generate; RSS; Increment     | normal Update                    |

- for each ORGMODE-file
  - for each entry tagged with BLOGTAG AND in DONE state
    - if no :ID: found
      - case1
      - warning
      - continue with next heading
    - if ID not known
      - case2
      - generate RSS
      - generate HTML
      - continue with next heading
    - if CREATED not found
      - case3
      - warning
      - continue with next heading
    - if CREATED not matching previous run
      - case4
      - error-msg
      - continue with next heading
    - elseif CREATED and CHECKSUM matches
      - case5 or case6
      - debug: entry has not changed
    - elseif CREATED matches and CHECKSUM not matching
      - if LASTUPDATE changed
        - case8
        - increment update-number
        - generate RSS
        - generate HTML
      - else (if LASTUPDATE unchanged)
        - case7
        - generate HTML

*** DONE [#A] finalize lazyblorg-algorithm sketch
CLOSED: [2012-11-10 Sat 18:10] DEADLINE: <2012-11-10 Sat>
:LOGBOOK:
- State "DONE"       from "NEXT"       [2012-11-10 Sat 18:10]
:END:
:PROPERTIES:
:CREATED:  [2012-11-07 Wed 21:23]
:END:

** TODO Inline HTML                                              :userstory:
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 10:32]
:END:

- writing HTML tags directly (not within any SRC-blocks)
- makes it easier to port old blog content

** TODO internal links to other blog entries                     :userstory:
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 10:34]
:END:
** TODO CSS: add slightly yellowish background                   :userstory:
:PROPERTIES:
:CREATED: [2012-05-11 Fri 09:36]
:END:

- if possible: very smooth color gradient from top to bottom

** TODO write colophon                                           :userstory:
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 11:31]
:END:

- example: http://www.tbray.org/ongoing/misc/Colophon

- containing
  - basic tools used
  - basic workflow
  - ...

** TODO content of help pages from Org heading                   :userstory:
:PROPERTIES:
:CREATED:  [2013-02-27 Wed 16:37]
:END:

Somewhere in my Org files, I do have a heading «$BLOGNAME». Within
its sub-heading «Help» there is the text for the main help
page. Further headings contain more content for other pages.

** SOMEDAY comments                                              :userstory:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2013-02-12 Tue 10:35]
:END:
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 10:35]
:END:

- simplest form: generate unique Email link and add at bottom
  - very easy to be done for catch-all MTAs
  - automatically derive whitelist for MTA to avoid old spam
- simple HTML form
  - POST to script, adding comment to my inbox.org (containing
    link to ID)
- disqus: I do not want to outsource comment hosting :-(

** SOMEDAY [#C] guessing language of entry                       :userstory:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2013-01-08 Tue 14:36]
:END:
:PROPERTIES:
:CREATED:  [2012-11-11 Sun 10:53]
:END:

- https://github.com/dsc/guess-language

** SOMEDAY hidden entries by using tag "notlinked"               :userstory:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2013-01-08 Tue 14:46]
:END:
:PROPERTIES:
:CREATED:  [2012-12-14 Fri 22:51]
:END:

- if web server does not allow directory listing, this entry can only
  be found with knowledge of the URL
- check: is Google crawler able to find it when it's not linked?

** SOMEDAY fixed entries by using a tag                          :userstory:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2013-01-08 Tue 14:46]
:END:
:PROPERTIES:
:CREATED:  [2012-12-21 Fri 09:48]
:END:

- outside of YYYY/MM/DD-hierarchy
- e.g.
  - tools I use
  - books I read
  - ...
** SOMEDAY publish (only) free/busy times (in multiple formats)  :userstory:
:LOGBOOK:
- State "SOMEDAY"    from ""           [2013-01-08 Tue 14:48]
:END:
:PROPERTIES:
:CREATED:  [2012-12-29 Sat 17:40]
:END:

** SOMEDAY CSS: round corners of images                          :userstory:
:LOGBOOK:
- State "SOMEDAY"    from "NEXT"       [2013-01-08 Tue 14:53]
:END:
:PROPERTIES:
:CREATED:  [2013-01-07 Mon 18:40]
:END:

- probably steal from http://www.tbray.org/ongoing/

** SOMEDAY [[http://tasker.dinglisch.net/][Tasker]]-script: share URL and send to my lazyblorg 
:LOGBOOK:
- State "SOMEDAY"    from ""           [2013-07-20 Sat 10:58]
:END:

- open questions
  - encryption
    - necessary? in the end, it gets public anyway :-)
  - prevent "content injection"
    - PKI: signing with private GnuPG-key of phone device?
      - DoS-attack still possible
        - sending a lot of fake messages
    - synchronous password?
    - ?

* Notes                                                               :notes:

** Implemented Org-mode Elements

- list of Org Mode elements: http://article.gmane.org/gmane.emacs.orgmode/67871
  - will get on Worg some day!

| Org-mode     | HTML5             | implemented since |
|--------------+-------------------+-------------------|
| headings     | section+header+h1 |                   |
| simple lists | ul+li             |                   |
| BEGIN_VERSE  | pre               |                   |
| BEGIN_QUOTE  | blockquote        |                   |
| tables       |                   |                   |
| images       |                   |                   |
| *bold*       | em                |                   |
| ~commands~   | code              |                   |

possible Org elements from ox-ascii.el:
#+BEGIN_QUOTE
bold
center-block
clock
code
drawer
dynamic-block
entity
example-block
export-block
export-snippet
fixed-width
footnote-definition
footnote-reference
headline
horizontal-rule
inline-src-block
inlinetask
inner-template
italic
item
keyword
latex-environment
latex-fragment
line-break
link
paragraph
plain-list
plain-text
planning
quote-block
quote-section
radio-target
section
special-block
src-block
statistics-cookie
strike-through
subscript
superscript
table
table-cell
table-row
target
template
timestamp
underline
verbatim
verse-block
#+END_QUOTE

** STARTED Representation of blog data
:PROPERTIES:
:CREATED:  [2013-05-21 Tue 15:26]
:ID: blog_data
:END:

~blog_data~ is a Python list containing one dictionary entry per blog
entry:

#+BEGIN_SRC python
  blog_data = \
  [ {'level': 2,                                                ## number of asterisks
     'title': u'This is a blog entry about foo', 
     'tags': [u'tag1', u'tag2'], 
     'id': u'lazyblorg-example-entry',                          ## ID from PROPERTIES-drawer
     'finished-timestamp-history': [datetime1, datetime2, datetime3],
     'timestamp': datetime,
     'content': [ ['par', u'This is the Org-mode content'],    ## 'par: paragraph containing anything that is not defined like tables, ...
                  '\n',    ## change of paragraph
                  ['heading', {'level': 3, 'title': u'Another aspect'}],  
                  ['list-itemize', [u'first line', u'second line']],
                  ['table', u'followed by this table data'],         #FIXXME: table syntax
                  ['image', u'followed by this image']               #FIXXME: image syntax
                ]                                                    #FIXXME: further elements
  } ]
#+END_SRC

Thus:
#+BEGIN_SRC python
blog_data[0].keys()
## ... results in:
# ['title',
#  'timestamp',
#  'tags',
#  'content',
#  'finished-timestamp-history',
#  'level',
#  'id']

blog_data[0]['content']  ## -> list of elements of content
# [['text', u'This is the Org-mode content'],
#  ['heading', {'level': 3, 'title': u'Another aspect'}],
#  ['list-itemize', [u'first line', u'second line']],
#  ['table', u'followed by this table data'],
#  ['image', u'followed by this image']]
#+END_SRC

** Development Schedule
:PROPERTIES:
:CREATED:  [2012-11-05 Mon 10:59]
:END:

- manually generate demo prototype
  - very basic Org-mode example file containing everything from below
  - HTML5 entry page
  - CSS2 style
  - HTML5 blog entry page
  - Tag description page
  - RSS feed
  - HTML5 blog entry page with update
  - Index overview page (archive)
  - description of basic work-flow for generating the blog
    - user point of view
    - system point of view
- refine and test design and features of prototype
  - ask for feedback
  - play around, break things
- development
  - define order of Org-mode items (headings, lists, images, ...) implementation priority
  - define even more basic (Org-mode, HTML) from above
  - very basic unit-tests from prototype files (Org-mode, HTML)
  - test and refine work-flow for (re-)generating the blog
  - implement more and more Org-mode items

** Wishlist without compromises
:PROPERTIES:
:ID: 2012blogwishlist-copy
:CREATED:  [2013-01-07 Mon 18:40]
:END:

NOTE: if entries are marked as done in this section, they are not
implemented but moved to a (separate) user-story above.

- Workflow to create a blog entry
  - make sure that there is an (uniq) :ID: property
  - add tag :blog: to heading
  - write content, subheadings, ...
  - change state of top-heading to DONE
  - (manually) invoke generation-script

- usage of only very basic markup
  - [X] paragraphs (p)
  - [X] headings (h1..n)
  - [X] http-references (a href)
  - [X] lists (ul)
  - [X] quote (verbatim)
  - [X] images (img)
  - [X] tables
  - [X] inline-HTML
  - [X] internal links to other entries

- advantages
  - a blog entry can be located anywhere in all of my Orgmode files
  - no extra formatting steps
  - very small overhead to create a blog entry
  - no duplicate information
    - update only in Orgmode, not HTML or any in-between format
  - static (fast) pages
  - self-hosting without any fancy services behind like RDBS

- open issues
  - [X] comments
    - simplest form: generate unique Email link and add at bottom
      - very easy to be done for catch-all MTAs
      - automatically derive whitelist for MTA to avoid old spam
    - simple HTML form
      - POST to script, adding comment to my inbox.org (containing
        link to ID)
    - disqus: I do not want to outsource comment hosting :-(
  - [X] how to include and format graphics?
    - sometimes, I e.g. want to have an image aligned right with text
      flowing around it
  - [-] probably: usage of in-between format like ikiwiki
    - Orgmode syntax -> ikiwiki markup (markdown?) -> usual
      ikiwiki-workflow
      - should be not much effort since prerequisites limit to few
        markup things
    - benefits from not having to re-implement many things
    - in-between-format HTML (like Manoj uses) is way too complicated
      causing misc potential error sources

- [ ] basic script workflow
  - find all headings with state DONE and tag :blog:
    - optionally: add all other tags starting with "blog-" as blog tags
  - one entry starts at such a heading until EOF OR same or less level
    heading is found
  - compare raw text and IDs with last run
    - known ID, raw text unchanged: ignore, no change
    - new ID
      - generate new blog entry
        - extract YYYY-MM-DD from LOGBOOK-drawer (first *->DONE transformation)
        - generate YYYY/MM/DD-folder structure in blog accordingly
        - generate sanitized blog title as file name
    - known ID, raw text differs
      - generate update of existing entry
        - add "(Update n)" (with n is the n-th update) to entry title
          - optionally: add this also to URL
            - disadvantage: broken old URLs
            - advantage: URL reflects update state
  - on any activity:
    - re-write RSS feed for last n entries
    - optionally: generate overview page for last n entries
    - optionally: generate calendar archive page(s)
    - optionally: generate tag overview page(s)
  - on any error:
    - create an orgmode event from current time that appears on agenda
    - with daily repeat -> so it gets noticed on the next day(s) too
    - in the description of that entry:
      - babel-sh-snippet with prepared command to re-try the run :-)

** Original post

Copied from: http://article.gmane.org/gmane.emacs.orgmode/49747/

Hi!

I got a nice idea on how a very easy to use Org-mode blog system
should look like.

Currently, I am using Serendipidy with web-based editor to write
HTML. Org-mode enabled me to write blog entries and export it to
HTML. Then I paste the HTML and have to modify minor things (images,
...) a bit. I guess the time from finishing the Org-mode entry to
the final blog entry is approximately ten to twenty minutes.

Overall, I do not want to do this process when I just want to
quickly write a view paragraphs within a couple of minutes. I need
a workflow with much less annoying overhead.

Therefore I sat down and thought about a workflow that should be
enough for writing simple weblog entries:

  - create an Org-mode heading (anywhere!)
  - make sure that there is an (uniq) :ID: property
  - add the tag :blog: to heading
  - <write content, subheadings, ...>
  - change state of top-heading to DONE
    - this enables blog entries «in the queue»
  - (manually) invoke generation-script

This enables me quick blogging with a list of advantages:

  - a blog entry can be located anywhere in all of my Orgmode files
  - no extra formatting steps
  - very small (almost non-existent) overhead to create a blog entry
  - no duplicate information
    - updates only in Orgmode, not HTML or any in-between format
  - static (fast) pages
  - self-hosting without any fancy services behind like RDBS

What do you think of my ideas so far?

Of course, I looked into existing solutions and found those:

  - http://orgmode.org/worg/org-blog-wiki.html
    - cool overview page for various solutions
  - http://orgmode.org/worg/blorgit.html
    - pretty complex set up :-(
    - I do not need a web-interface to edit Org-mode files
    - seem to have «different» use cases
  - http://orgmode.org/worg/org-tutorials/org-jekyll.html
    - uses HTML as in-between format; seems to provide many error
      possibilities(?)
    - converting whole files only (not desired)
    - have to try it someday
  - http://emacs-fu.blogspot.com/2009/05/writing-and-blogging-with-org-mode.html
    - uses only HTML export
  - http://blog.herraiz.org/archives/241
    - uses only HTML export
  - https://github.com/chrismgray/ikiwiki-org-plugin
    - promising but only one part of a possible solution

So nothing offers the features and small footprint as my idea above
:-(

With some prerequisites, it should not be that hard to even
implement it by myself:

  - usage of only very basic markup
    - paragraphs (p)
    - headings (h1..n)
    - http-references (a href)
    - lists (ul)
    - images (img)
    - quote (verbatim)

Still there are some open issues:

  - comments
    - simplest form: generate unique Email link and add at bottom
      - very easy to be done for catch-all MTAs
      - automatically derive whitelist for MTA to avoid old spam
    - simple HTML form
      - POST to script, adding comment to my inbox.org (containing
        link to ID)
    - disqus: I do not want to outsource comment hosting :-(
  - how to include and format graphics?
    - sometimes, I e.g. want to have an image aligned right with text
      flowing around it
  - probably: usage of in-between format like ikiwiki
    - Orgmode syntax -> ikiwiki markup (markdown?) -> usual
      ikiwiki-workflow
      - should be not much effort since prerequisites limit to few
        markup things
    - benefits from not having to re-implement many things
    - in-between-format HTML (like Manoj uses) is way too complicated
      causing misc potential error sources

The basic script workflow is not that complicated:

  - find all headings with state DONE and tag :blog:
    - optionally: add all other tags starting with "blog-" as blog tags
  - one entry starts at such a heading until EOF OR same or less level
    heading is found
  - compare raw text and IDs with last run
    - known ID, raw text unchanged: ignore, no change
    - new ID
      - generate new blog entry
        - extract YYYY-MM-DD from LOGBOOK-drawer (first *->DONE transformation)
        - generate YYYY/MM/DD-folder structure in blog accordingly
        - generate sanitized blog title as file name
    - known ID, raw text differs
      - generate update of existing entry
        - add "(Update n)" (with n is the n-th update) to entry title
          - optionally: add this also to URL
            - disadvantage: broken old URLs
            - advantage: URL reflects update state
  - on any activity:
    - re-write RSS feed for last n entries
    - optionally: generate overview page for last n entries
    - optionally: generate calendar archive page(s)
    - optionally: generate tag overview page(s)

* Local Variables                                                  :noexport:
# Local Variables:
# mode: auto-fill
# mode: flyspell
# eval: (ispell-change-dictionary "en_US")
# End:
