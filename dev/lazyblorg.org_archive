
Archived entries from file /home/vk/src/lazyblorg/dev/lazyblorg.org


* Issue Tracking                                                     :issues:

** DONE move id:2012blogwishlist-copy ideas to unique issues     :userstory:
CLOSED: [2013-02-12 Tue 10:40]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-02-12 Tue 10:40]
:END:
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 10:39]
:ARCHIVE_TIME: 2013-02-12 Tue 10:40
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:

** CANCELLED Configuration file = Orgmode format     :architecture:CANCELLED:
CLOSED: [2013-01-08 Tue 14:47]
:LOGBOOK:
- State "CANCELLED"  from "STARTED"    [2013-01-08 Tue 14:47] \\
  INI is probably a better format for configuration files
:END:
:PROPERTIES:
:CREATED:  [2012-12-26 Wed 11:36]
:ARCHIVE_TIME: 2013-02-12 Tue 11:08
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: CANCELLED
:ARCHIVE_ITAGS: issues
:END:

- asked the Org ML
- INI file format probably a better solution

*** DONE determine best way of storing configuration :reward:Kommunikation:
CLOSED: [2013-01-02 Wed 17:22] SCHEDULED: <2012-12-30 Sun>
:LOGBOOK:
- State "DONE"       from "STARTED"    [2013-01-02 Wed 17:22]
:END:
:PROPERTIES:
:CREATED:  [2012-12-30 Sun 18:32]
:END:

- Possible methods to store configuration/settings of a weblog system
  that scans Org-mode files to generate HTML:
  - in drawers: see below
  - in tables: see below
  - in tags: see below
  - other possibilities?

- why not using elisp-methods like "setq" or "defvar" or "defcustom"?
  - this weblog will be implemented in Python
  - Sorry, I do not have any elisp knowledge and it seems to be the
    case that this is not going to change within the next months.
  - In Python I have to parse a basic sub-set of Org-mode format
    anyhow. An additional parser would be more work to do.
  - Why not using Org-mode for end-user configuration as well?
    - It's more user-friendly for non elisp users like me.

- <2013-01-02 Wed 17:21> INI-file format seems to be the better solution

**** Configuring Paths (in Drawers)
:PROPERTIES:
:COLUMNS:  %25ITEM %PATH
:CREATED:  [2013-01-07 Mon 18:40]
:END:

- advantages
  - usage of column view
  - easy to add comments for each setting
- disadvantages
  - Properties have to be the same
    - not that flexible in naming Properties

- possible name for property "VALUE" which makes it more general.

***** Image-Path
:PROPERTIES:
:PATH: ~/images
:CREATED:  [2013-01-07 Mon 18:40]
:END:

In this folder, the Web log image files are placed after being
processed (resizing, ...).

***** HTML-Path
:PROPERTIES:
:PATH: ~/blog/html
:CREATED:  [2013-01-07 Mon 18:40]
:END:

**** Configuring Paths (in Tables)
:PROPERTIES:
:CREATED:  [2013-01-07 Mon 18:40]
:END:

| *Variable*      | *Value*       | *Comments*                                          |
|-----------------+---------------+-----------------------------------------------------|
| Image Path      | ~/images      | The path where the images should be placed in.      |
| HTML Path       | ~/blog/html   | Destination path for the HTML file folder structure |
| Another Setting | another value | This has to be very short.                          |

- advantages
  - easy to write and maintain
  - quick overview
- disadvantages
  - hard to add (long) comments for each setting

**** Configuring Paths (with Tags)
:PROPERTIES:
:CREATED:  [2013-01-07 Mon 18:40]
:END:

- advantages
  - same settings can be shared through multiple tags on same value
  - easy to add comments for each setting
- disadvantages
  - seems strange at first glance; not sure if this really makes any
    sense at all
  - multiple word preference name has to be written in CamelCase or
    separated with dashes

***** ~/images                                                :ImagePath:
:PROPERTIES:
:CREATED:  [2013-01-07 Mon 18:40]
:END:

***** ~/blog/html                                              :HtmlPath:
:PROPERTIES:
:CREATED:  [2013-01-07 Mon 18:40]
:END:

** DONE CSS: format breadcrumbs                               :architecture:
CLOSED: [2013-02-12 Tue 19:36]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-02-12 Tue 19:36]
:END:
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 15:32]
:ARCHIVE_TIME: 2013-02-14 Thu 16:45
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:

- example: http://www.hongkiat.com/blog/breadcrumb-menu-css3/

** CANCELLED spike: calling Org-mode elisp HTML exporter from command line :architecture:ARCHIVE:
CLOSED: [2013-03-01 Fri 13:27]
:LOGBOOK:
- State "CANCELLED"  from "STARTED"    [2013-03-01 Fri 13:27] \\
  could not make it run; idea dismissed also because of other arguments
:END:
:PROPERTIES:
:CREATED:  [2013-02-27 Wed 09:54]
:ARCHIVE_TIME: 2013-03-01 Fri 13:28
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: CANCELLED
:ARCHIVE_ITAGS: issues
:END:

Idea: put (partly sanitized/modified) Org-mode paragraph(s) into text
file and using Org HTML exporter to generate HTML out of it.

Weird, but it would get lazyblorg to support way more HTML entities.

- 2013-03-01: giving up the idea of using Org-mode HTML export for now.
  - could not made it work (see id:2013-03-01-org-to-html-batch)
  - it's too complicated with its dependencies
  - would require massive unit testing
  - would require modifying the generated XHTML 1.0 to HTML5 anyway
  - would require modifying the content anyway
    - match heading numbers (<h1> instead of <h2>, ...)

*** DONE Calling simple ELISP from shell
CLOSED: [2013-02-27 Wed 11:04]
:LOGBOOK:
- State "DONE"       from ""           [2013-02-27 Wed 11:04]
:END:
:PROPERTIES:
:CREATED:  [2013-02-27 Wed 11:04]
:END:

calling simple elisp as a shell script:

test.el:
#+BEGIN_SRC elisp
(print (+ 2 2))
#+END_SRC

invoking from command line:
#+BEGIN_SRC sh
emacs -Q --script ./test.el
#+END_SRC

Shorter version:
#+BEGIN_SRC sh :results output
echo "(print (+ 2 2))" >test.el | emacs -Q --script test.el ; rm test.el
#+END_SRC

#+RESULTS:
:
: 4

*** DONE Calling Org-HTML-export in ELISP
CLOSED: [2013-03-01 Fri 13:09] SCHEDULED: <2013-03-01 Fri>
:LOGBOOK:
- State "DONE"       from "STARTED"    [2013-03-01 Fri 13:09]
- State "STARTED"    from "WAITING"    [2013-03-01 Fri 12:30]
- State "WAITING"    from "STARTED"    [2013-02-27 Wed 16:35] \\
  bug report waiting for answer
- State "STARTED"    from "DONE"       [2013-02-27 Wed 11:09]
- State "DONE"       from ""           [2013-02-27 Wed 11:04]
:END:
:PROPERTIES:
:CREATED:  [2013-02-27 Wed 11:04]
:ID: 2013-02-27-org-to-html
:END:

1. export current Org-mode buffer as HTML in temp buffer
2. write temp buffer to file
3. close temp buffer

#+BEGIN_SRC elisp
(describe-function 'org-export-as-html)
#+END_SRC

#+RESULTS:
#+begin_example
org-export-as-html is an interactive compiled Lisp function.

(org-export-as-html ARG &optional HIDDEN EXT-PLIST TO-BUFFER BODY-ONLY
PUB-DIR)

Export the outline as a pretty HTML file.
If there is an active region, export only the region.  The prefix
ARG specifies how many levels of the outline should become
headlines.  The default is 3.  Lower levels will become bulleted
lists.  HIDDEN is obsolete and does nothing.
EXT-PLIST is a property list with external parameters overriding
org-mode's default settings, but still inferior to file-local
settings.  When TO-BUFFER is non-nil, create a buffer with that
name and export to that buffer.  If TO-BUFFER is the symbol
`string', don't leave any buffer behind but just return the
resulting HTML as a string.  When BODY-ONLY is set, don't produce
the file header and footer, simply return the content of
<body>...</body>, without even the body tags themselves.  When
PUB-DIR is set, use this as the publishing directory.
#+end_example

Therefore:
#+BEGIN_SRC elisp
(org-export-as-html 3 nil nil "htmlized-output" nil nil)
;(switch-to-buffer "htmlized-output")
;(write-file "~/src/lazyblorg/htmlized-out.html")
;(kill-buffer)
#+END_SRC

#+RESULTS:
: t

Results in:
#+BEGIN_VERSE
org-export-preprocess-string: Wrong number of arguments: #[(&optional sort-only) "√Ü√Ä!¬Ö ¬Ö S¬â¬Ö 
¬É 	√á_S¬Ç 	√à¬É* √â√ä\"¬Ç+ √ãP√å√ç¬â56√ç7¬äeb¬à√é ¬â6¬É√î 6@86A@98¬ÖZ √è87\"¬â:A@¬Üf T¬â;√ê68;¬Üt √ê:8<=¬É¬Ñ √á68b¬à¬Ç¬® 6A@√á68|¬à6A@b¬à√â√ë;\"c¬à<¬É¬® >¬É¬® √í ¬à:¬Ñ√ê √ê68¬Ü¬∫ √ê√ì8!8?8;?<√î9!¬Ø7B7)-¬Ç< @¬É√ï√ñ!¬Éeb¬à√ó√ò√ô@!√öQ√ç√õ#¬É√∏ √å¬î√ú√õ¬â\"|¬àdb¬à√ù√çx¬à√çy¬àn¬ÑX√û ¬à¬ÇX√ï√ñ!¬ÑXA¬É;√ü√ôA!√öQBeb¬à√óB√ç√õ#¬É:√†√°!¬à`√çy¬à`|¬à¬Ç#)√ï√¢!¬ÉUdb¬ÉU√£C√ç√õ#¬ÉU√§ ¬à¬ÇXdb¬à√• 5√¶√ç√ß√®7\"\"¬â7¬ü7√©√™7\"¬à5b¬à7?¬Ü√¢√ï√ñ!¬É¬Ö@¬É√ù√ï√ñ!¬Ñ¬™√´√çx¬à`5|¬àn¬Ñ¬õ√û ¬àA¬É√Ö√¨A√¨¬±¬à¬Ç√Ö√≠D¬ûA¬É¬æ√Æ¬ä√Ø )!¬É¬æ√¨c¬à√∞@√¨¬±¬à5√ç¬â¬ì¬à√±√≤7√¨#c¬àm?¬Ö√¢√≥c¬Ç√¢√©√¥7\".¬á" [org-inlinetask-min-level limit-level org-odd-levels-only nstars org-outline-regexp count boundp 2 "\\*" format ...] 7 ("/home/vk/.emacs.d/contrib/org-mode/lisp/org-footnote.elc" . 16141)], 2
#+END_VERSE

So, org-mode/lisp/org-footnote.elc does have an issue. I guess this is
because people are working these days on Org-8.0, especially the
exporter.

Updating Orgmode from 5d467d6f8affc0afe34922e885ac6e2492ddd091 (Fri
Feb 15 15:28:35 2013 +0100) to
692f053d8067e2314826cfcd3cf4ded7362a8dce (Wed Feb 27 14:49:46 2013
+0100)

Still facing an error:

#+BEGIN_VERSE
org-export-preprocess-string: Wrong number of arguments: #[(&optional sort-only) "√Ü√Ä!¬Ö ¬Ö S¬â¬Ö 
¬É 	√á_S¬Ç 	√à¬É* √â√ä\"¬Ç+ √ãP√å√ç¬â56√ç7¬äeb¬à√é ¬â6¬É√î 6@86A@98¬ÖZ √è87\"¬â:A@¬Üf T¬â;√ê68;¬Üt √ê:8<=¬É¬Ñ √á68b¬à¬Ç¬® 6A@√á68|¬à6A@b¬à√â√ë;\"c¬à<¬É¬® >¬É¬® √í ¬à:¬Ñ√ê √ê68¬Ü¬∫ √ê√ì8!8?8;?<√î9!¬Ø7B7)-¬Ç< @¬É√ï√ñ!¬Éeb¬à√ó√ò√ô@!√öQ√ç√õ#¬É√∏ √å¬î√ú√õ¬â\"|¬àdb¬à√ù√çx¬à√çy¬àn¬ÑX√û ¬à¬ÇX√ï√ñ!¬ÑXA¬É;√ü√ôA!√öQBeb¬à√óB√ç√õ#¬É:√†√°!¬à`√çy¬à`|¬à¬Ç#)√ï√¢!¬ÉUdb¬ÉU√£C√ç√õ#¬ÉU√§ ¬à¬ÇXdb¬à√• 5√¶√ç√ß√®7\"\"¬â7¬ü7√©√™7\"¬à5b¬à7?¬Ü√¢√ï√ñ!¬É¬Ö@¬É√ù√ï√ñ!¬Ñ¬™√´√çx¬à`5|¬àn¬Ñ¬õ√û ¬àA¬É√Ö√¨A√¨¬±¬à¬Ç√Ö√≠D¬ûA¬É¬æ√Æ¬ä√Ø )!¬É¬æ√¨c¬à√∞@√¨¬±¬à5√ç¬â¬ì¬à√±√≤7√¨#c¬àm?¬Ö√¢√≥c¬Ç√¢√©√¥7\".¬á" [org-inlinetask-min-level limit-level org-odd-levels-only nstars org-outline-regexp count boundp 2 "\\*" format ...] 7 ("/home/vk/.emacs.d/contrib/org-mode/lisp/org-footnote.elc" . 16171)], 2
#+END_VERSE

#+BEGIN_SRC elisp
(org-version)
#+END_SRC

#+RESULTS:
: 7.9.3f

- <2013-02-27 Wed> I wrote a message to the Org ML with a bug description
- <2013-02-28 Thu> Achim Gratz: "You are trying to use the old
  exporter and pick up code from an earlier version of Org."
- <2013-02-28 Thu> Erich Neuwirth: "As I learned the correct name for
  elisp to use with begin_src is emacs-lisp, not elisp"
- <2013-03-01 Fri> Nicolas Goaziou: "`org-html-export-to-html' (output to file) and `org-html-export-as-html'
  (output to temporary buffer).

  For batch processing, you can also use `org-export-as', in conjunction
  with `html' backend, which will output a string.

  There's also `org-export-string-as', which will do the same as
  `org-export-as' but will work from an input string instead of the
  current buffer."

#+BEGIN_SRC emacs-lisp
(describe-function 'org-export-as)
#+END_SRC

#+RESULTS:
#+begin_example
org-export-as is a compiled Lisp function in `ox.el'.

(org-export-as BACKEND &optional SUBTREEP VISIBLE-ONLY BODY-ONLY
EXT-PLIST)

Transcode current Org buffer into BACKEND code.

If narrowing is active in the current buffer, only transcode its
narrowed part.

If a region is active, transcode that region.

When optional argument SUBTREEP is non-nil, transcode the
sub-tree at point, extracting information from the headline
properties first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

When optional argument BODY-ONLY is non-nil, only return body
code, without surrounding template.

Optional argument EXT-PLIST, when provided, is a property list
with external parameters overriding Org default settings, but
still inferior to file-local settings.

Return code as a string.
#+end_example

#+BEGIN_SRC emacs-lisp
  (let* (
         (mycontent (org-export-as 'html t nil nil))
         )
    (with-temp-buffer 
      (setq coding-system-for-write 'no-conversion)
      (insert mycontent)
      ;(set-buffer-file-coding-system 'utf-8)
      (write-file "~/src/lazyblorg/htmlized-out.html")
      )
    )
#+END_SRC

#+RESULTS:

... works :-) ... but asks for interactive charset encoding :-(
("select coding system")

- How to set encoding?
  - Variable buffer-file-coding-system -> defaults to utf-8
  - set-buffer-file-coding-system -> that's it
  - https://www.gnu.org/software/emacs/manual/html_node/elisp/Explicit-Encoding.html#Explicit-Encoding
   - "setq coding-system-for-write 'no-conversion" (added above)

... works :-)

*** Calling Org-to-HTML ELISP from command line
:PROPERTIES:
:ID: 2013-03-01-org-to-html-batch
:END:

1. start Emacs
2. activate Org
3. configure Org (?)
4. open Org-mode file
5. export as HTML in a file
6. return

**** Error: Wrong type argument: listp, "temphtmlizing" (old exporter)

First try:

#+BEGIN_SRC elisp
;; Activate UTF-8 mode:
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;; load Org
(add-to-list 'load-path "~/.emacs.d/contrib/org-mode/contrib/lisp")
(add-to-list 'load-path (expand-file-name "~/.emacs.d/contrib/org-mode/lisp"))
(require 'org)

(find-file "~/src/lazyblorg/lazyblorg.org")
(org-export-as-html 3 nil "temphtmlizing" t nil)
#+END_SRC

... results in: Wrong type argument: listp, "temphtmlizing"

Checking org-export-as-html:

test.el:
#+BEGIN_SRC elisp
;; load Org
(add-to-list 'load-path "~/.emacs.d/contrib/org-mode/contrib/lisp")
(add-to-list 'load-path (expand-file-name "~/.emacs.d/contrib/org-mode/lisp"))
(require 'org)

(print (describe-function 'org-export-as-html))
#+END_SRC

... results in ...

#+BEGIN_VERSE
vk@gary ~2d % emacs -Q --script ./test.el
Type C-x 1 to delete the help window, C-M-v to scroll help.

#("org-export-as-html is an interactive autoloaded Lisp function.

(org-export-as-html ARG &optional HIDDEN EXT-PLIST TO-BUFFER BODY-ONLY
PUB-DIR)

Export the outline as a pretty HTML file.
If there is an active region, export only the region.  The prefix
ARG specifies how many levels of the outline should become
headlines.  The default is 3.  Lower levels will become bulleted
lists.  HIDDEN is obsolete and does nothing.
EXT-PLIST is a property list with external parameters overriding
org-mode's default settings, but still inferior to file-local
settings.  When TO-BUFFER is non-nil, create a buffer with that
name and export to that buffer.  If TO-BUFFER is the symbol
`string', don't leave any buffer behind but just return the
resulting HTML as a string.  When BODY-ONLY is set, don't produce
the file header and footer, simply return the content of
<body>...</body>, without even the body tags themselves.  When
PUB-DIR is set, use this as the publishing directory." 84 87 (face help-argument-name) 98 104 (face help-argument-name) 105 114 (face help-argument-name) 115 124 (face help-argument-name) 125 134 (face help-argument-name) 135 142 (face help-argument-name) 253 256 (face help-argument-name) 385 391 (face help-argument-name) 422 431 (face help-argument-name) 565 574 (face help-argument-name) 649 658 (face help-argument-name) 767 776 (face help-argument-name) 919 926 (face help-argument-name))
vk@gary ~2d %
#+END_VERSE

... with "HIDDEN" as an additional parameter :-O

Maybe the Org-version is different?

#+BEGIN_SRC elisp
;; load Org
(add-to-list 'load-path "~/.emacs.d/contrib/org-mode/contrib/lisp")
(add-to-list 'load-path (expand-file-name "~/.emacs.d/contrib/org-mode/lisp"))
(require 'org)
(print (org-version))
#+END_SRC

-> "7.9.3e"

Interactively calling org-version: Org-mode version 7.9.3c
(release_7.9.3c-816-g409ee8 @
/home/vk/.emacs.d/contrib/org-mode/lisp/)

So basically, it matches :-O

I remember: in my Org-config, I already switched to the new
exporter. So I guess this is not done in the default setting of Org.

No, I could not find anything in my .orgmode.el that activates
something different for exporting HTML. :-(

Re-starting GNU/Emacs.

OK, now I get the error even when calling the function from within
running emacs :-O

Fixing method that worked in previous heading. See
id:2013-02-27-org-to-html for fixing this issue! (I was using the old
export method)

**** Using new exporter

: vk@gary ~2d % emacs -Q --script ./test.el

with ~2d/test.el 
#+BEGIN_SRC emacs-lisp
;; Activate UTF-8 mode:
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;; load Org
(add-to-list 'load-path "~/.emacs.d/contrib/org-mode/contrib/lisp")
(add-to-list 'load-path (expand-file-name "~/.emacs.d/contrib/org-mode/lisp"))
(require 'org)

(find-file "~/src/lazyblorg/lazyblorg.org")

(let* (
       (mycontent (org-export-as 'html t nil nil))
       )
  (with-temp-buffer 
    (setq coding-system-for-write 'no-conversion)
    (insert mycontent)
    (write-file "~/src/lazyblorg/htmlized-out.html")
    )
  )
#+END_SRC

... results in:
#+BEGIN_VERSE
vk@gary ~2d % emacs -Q --script ./test.el
OVERVIEW
Loading vc-git...
Before first headline at position 1 in buffer lazyblorg.org
255 vk@gary ~2d %
#+END_VERSE
... caused by the org-export-as function

Tested:
#+BEGIN_SRC emacs-lisp
;; load Org
(add-to-list 'load-path "~/.emacs.d/contrib/org-mode/contrib/lisp")
(add-to-list 'load-path (expand-file-name "~/.emacs.d/contrib/org-mode/lisp"))
(require 'org)

(find-file "~/src/lazyblorg/lazyblorg.org")
(outline-next-visible-heading)
(org-export-as 'html t nil nil)
#+END_SRC
... with:

#+BEGIN_VERSE
vk@gary ~2d % emacs -Q --script ./test.el
OVERVIEW
Loading vc-git...
Wrong number of arguments: #[(arg) ÔøΩWÔøΩÔøΩ ÔøΩÔøΩÔøΩÔøΩÔøΩoÔøΩÔøΩWÔøΩ@oÔøΩ:ÔøΩÔøΩ
ÔøΩQÔøΩÔøΩ#ÔøΩÔøΩ:ÔøΩÔøΩ
          ÔøΩ4`ÔøΩ\")TÔøΩmÔøΩÔøΩVÔøΩpmÔøΩjÔøΩÔøΩ
ÔøΩQÔøΩÔøΩ#ÔøΩÔøΩjƒîÔøΩ
          ÔøΩd`ÔøΩ\")ÔøΩSÔøΩ@   ÔøΩvÔøΩ )ÔøΩ" [arg found-heading-p outline-regexp pos 0 beginning-of-line nil re-search-backward "^\\(?:" "\\)" ...] 4 ("/usr/share/emacs/23.4/lisp/outline.elc" . 24841) "p"], 0
255 vk@gary ~2d %
#+END_VERSE

... OK, giving up the idea of using Org-mode HTML export for now.

** CANCELLED idea: generate article body using Org-exporter :architecture:ARCHIVE:
CLOSED: [2013-02-14 Thu 17:21]
:LOGBOOK:
- State "CANCELLED"  from "NEXT"       [2013-02-14 Thu 17:21]
:END:
:PROPERTIES:
:CREATED:  [2013-02-14 Thu 17:17]
:ARCHIVE_TIME: 2013-05-21 Tue 21:36
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: CANCELLED
:ARCHIVE_ITAGS: issues
:END:

- header, title, footer: generate using Python
- main body: generate using Org-mode and temp-buffer using for
  converting

- advantages
  - Blog can parse/generate everything the Org-exporter can parse

- disadvantages
  - no custom links to other blog entries
    - or not that easy to implement
  - dependency to a running Emacs instance
    - configuration issues
    - path issues
    - performance issues(!)
      - each article has to be exported in one single export of its
        own
  - might cause some issues when Org-exporter changes

- <2013-02-14 Thu> so far, I do not consider the issue with external
  dependency to Emacs as negative

** CANCELLED create Module for constants              :architecture:ARCHIVE:
CLOSED: [2013-05-21 Tue 20:54]
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2013-05-21 Tue 20:54] \\
  I used class constants (so far)
:END:
:PROPERTIES:
:CREATED:  [2013-02-17 Sun 13:10]
:ARCHIVE_TIME: 2013-05-21 Tue 21:37
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: CANCELLED
:ARCHIVE_ITAGS: issues
:END:

- for defining/customizing HTML snippets, basic structure and so on

** DONE tools: parse timestamps                               :architecture:
CLOSED: [2013-05-21 Tue 20:55]
:LOGBOOK:
- State "DONE"       from "TODO"       [2013-05-21 Tue 20:55]
:END:
:PROPERTIES:
:CREATED:  [2013-02-14 Thu 17:30]
:ARCHIVE_TIME: 2013-05-21 Tue 21:37
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:

- example: parse_datetime() in https://github.com/bjonnh/PyOrgMode/blob/master/PyOrgMode.py
- I used orgformat.py from Memacs

** DONE spike: parsing Org-mode files in Python               :architecture:
CLOSED: [2013-05-21 Tue 20:54]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-05-21 Tue 20:54]
:END:
:PROPERTIES:
:CREATED: [2012-07-22 Sun 18:08]
:ARCHIVE_TIME: 2013-05-21 Tue 21:37
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:

- https://github.com/bjonnh/PyOrgMode
- list of several Python parsers: https://github.com/julian-gehring/worg/blob/master/org-tools/index.org
  - http://members.optusnet.com.au/~charles57/GTD/orgnode.html
    - MIT license
    - last change: 2009-06
    - is able to read node by node (=heading)
    - return (unmodified) body of each node
    - returns tags and properties
    - looks usable
    - code no that big
    - probably: have to extend parser for LOGBOOK-drawers
  - https://github.com/bjonnh/PyOrgMode
    - GPL v3
    - last change: 2012-10
    - very few documentation available
    - long [[https://github.com/bjonnh/PyOrgMode/blob/master/TODO][list of open todos]]

- <2013-02-14 Thu> looks like I'm gonna stick to OrgNode for now

** DONE create Module for tool methods                        :architecture:
CLOSED: [2013-05-21 Tue 20:54]
:LOGBOOK:
- State "DONE"       from "TODO"       [2013-05-21 Tue 20:54]
:END:
:PROPERTIES:
:CREATED:  [2013-02-17 Sun 13:07]
:ARCHIVE_TIME: 2013-05-21 Tue 21:37
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:

- http://docs.python.org/2/tutorial/modules.html
- tools.OrgParserTools (?)

** DONE find Python checksum algorithm                        :architecture:
CLOSED: [2013-02-15 Fri 20:06]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-02-15 Fri 20:06]
:END:
:PROPERTIES:
:CREATED:  [2013-02-15 Fri 20:03]
:ID: 2013-02-15-checksum
:ARCHIVE_TIME: 2013-08-22 Thu 11:43
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:

- http://docs.python.org/2/library/hashlib.html#module-hashlib
- http://code.wikia.com/wiki/SHA_checksum#Python
- https://en.wikipedia.org/wiki/Cryptographic_hash_function#Cryptographic_hash_algorithms

- sha1 or md5 seems a good choice

example:
#+BEGIN_SRC python
import hashlib
converted = hashlib.sha1("My text").hexdigest()
#+END_SRC

- checksum over:
  - data['title']
  - data['timestamp'] ?
  - data['tags']
  - data['content']

** DONE spike: storing data objects in Python                 :architecture:
CLOSED: [2013-08-20 Tue 13:40]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-08-20 Tue 13:40]
:END:
:PROPERTIES:
:CREATED:  [2013-08-20 Tue 11:10]
:ARCHIVE_TIME: 2013-08-22 Thu 11:43
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:

- http://docs.python.org/2/library/pickle.html
  - serialization, storing to disk
  - storage format defined by: protocol version
    - Protocol version 0 is the original ASCII protocol and is
      backwards compatible with earlier versions of Python.
    - Protocol version 1 is the old binary format which is also
      compatible with earlier versions of Python.
    - Protocol version 2 was introduced in Python 2.3. It provides
      much more efficient pickling of new-style classes.
    - HIGHEST_PROTOCOL -> uses 2 if 2 is still the highest format

- example:
  http://stackoverflow.com/questions/4529815/how-to-save-an-object-in-python
#+BEGIN_SRC python
import pickle

class Company:
    def __init__(self, name, value):
        self.name = name
        self.value = value

format = pickle.HIGHEST_PROTOCOL
format = 0

with open('company_data.pk', 'wb') as output:
    company1 = Company('banana', 40)
    pickle.dump(company1, output, format)

    company2 = Company('spam', 42)
    pickle.dump(company2, output, format)

company1 = None
company2 = None

with open('company_data.pk', 'rb') as input:
    company1 = pickle.load(input)
    print company1.name
    # banana
    print company1.value
    # 40

    company2 = pickle.load(input)
    print company2.name
    # spam
    print company2.value
    # 42
#+END_SRC

- works (not in babel above but in separate file)
  - not working in babel because babel-code is put into separate
    sub-class and store-object of pickle must not be a sub-class at
    all

** DONE create template file(s) for HTML snippets             :architecture:
CLOSED: [2013-08-20 Tue 18:58]
:LOGBOOK:
- State "DONE"       from "STARTED"    [2013-08-20 Tue 18:58]
:END:
:PROPERTIES:
:CREATED:  [2013-03-13 Wed 10:21]
:ID: 2013-03-13-HTML-template-file
:ARCHIVE_TIME: 2013-08-22 Thu 11:44
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:

- lazyblorg/templates/blog-format.org
  - article
    - header
    - footer
    - title
    - tags
    - tag
    - heading
    - par
    - <all other recognized entities>
  - <misc meta-pages like jump-pages and so on>

Example:

#+NAME: par
#+BEGIN_HTML

<p>

#CONTENT#

</p>

#+END_HTML

(if single line, lazyblorg trims the strings)

- Org-mode format "header"
- HTML src block with actual template
- #LB-TITLE# -> title
- #LB-AUTHOR# -> Authors name
- and so on

** DONE parse format template file                            :architecture:
CLOSED: [2013-08-22 Thu 11:39]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-08-22 Thu 11:39]
:END:
:PROPERTIES:
:CREATED:  [2013-08-20 Tue 19:04]
:ARCHIVE_TIME: 2013-08-22 Thu 11:44
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:

- history/idea: see id:2013-03-13-HTML-template-file

** DONE logs: lazyblorg-log.org                               :architecture:
CLOSED: [2013-08-22 Thu 11:43]
:LOGBOOK:
- State "DONE"       from "TODO"       [2013-08-22 Thu 11:43]
:END:
:PROPERTIES:
:CREATED:  [2013-01-12 Sat 13:43]
:ARCHIVE_TIME: 2013-08-22 Thu 11:44
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:

format example:
: * lazyblorg logs                                         :lazyblorg:BLOGNAME:
: ** [2013-01-12 Sat 13:44] lazyborg-run started
: 2013-01-12 Sat 13:44 do this
: 2013-01-12 Sat 13:45 did that
: *** <2013-01-12 Sat 13:46> ERROR: error description
: *** <2013-01-12 Sat 13:46> WARNING: error description

** DONE [#A] test compare_blog_metadata()                            :tests:
CLOSED: [2013-08-27 Tue 20:54]
:LOGBOOK:
- State "DONE"       from "STARTED"    [2013-08-27 Tue 20:54]
:END:
:PROPERTIES:
:CREATED:  [2013-08-22 Thu 23:38]
:ARCHIVE_TIME: 2013-08-27 Tue 20:55
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:

- [X] test-Org-mode
  - all eight cases:
    1. new ID found -> generate, mark_for_RSS
    2. no ID found -> is not possible here any more since metadata
      (dict) contains only entries with IDs -> should be done in parser:
      WARN, ignore
    3. CREATED not found -> WARN, ignore
    4. CREATED found but differs from previous run (should not change)
       -> WARN, ignore
    5. known and matching previous run: ID, CREATED, checksum;
       differs: timestamp
       -> generate
    6. known and matching previous run: ID, CREATED, checksum, timestamp
       -> generate
    7. known and matching: ID, CREATED, last timestamp; differs:
       checksum -> silent update -> generate
    8. known and matching: ID, CREATED; differs: checksum, last
      timestamp -> normal update -> generate, mark_for_RSS,
      increment_version
  - how to create test.org
    - cases that need first run: 4, 5, 6, 7, 8
    - cases introduced in second run: 1, 2, 3,
    - cases that need modification from first to second: 4, 5, 7, 8
- [X] write test class: lazyblorg.py
- [X] test-previous_metadata file
- [X] test-metadata file

** DONE create a new module lib/htmlizer.py                   :architecture:
CLOSED: [2013-08-27 Tue 21:12]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-08-27 Tue 21:12]
:END:
:PROPERTIES:
:CREATED:  [2013-08-22 Thu 21:15]
:ARCHIVE_TIME: 2013-08-27 Tue 21:12
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:

- holds everything which is needed for generating HTML/CSS output files

** DONE Idea: do paragraph parsing                            :architecture:
CLOSED: [2013-08-30 Fri 14:58]
:LOGBOOK:
- State "DONE"       from "TODO"       [2013-08-30 Fri 14:58]
:END:
:PROPERTIES:
:CREATED:  [2013-02-27 Wed 16:48]
:ARCHIVE_TIME: 2013-08-30 Fri 14:58
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:

- paragraphs are separated by at least one empty line OR they end
  with a line starting with:
  - ¬ª#+¬´
- each paragraph is handled separately BUT paragraphs of an
  environment are being combined
- for each normal text paragraph:
  - remove \n
  - sanitize
    - insert lazyblorg-specific links
    - HTMLize with ...
      - either simple with own code OR
        - fast
        - only a few syntax elements can be parsed
      - using Org-mode exporter methods
        - slow
        - complicated set-up
        - supports everything which is supported by the Org-mode HTML
          export
    - if simple HTMLizer chosen:
      - re-insert \n for first space after 80 characters

Documentation:
- clearly state that lazyblorg does support *no org-mode syntax*
  except <list-of-supported-elements-and-their-context>

** DONE [#A] define (link) structure of blog entries                 :tests:
CLOSED: [2013-02-12 Tue 14:11]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-02-12 Tue 14:11]
:END:
:PROPERTIES:
:CREATED: [2012-07-22 Sun 17:29]
:ARCHIVE_TIME: 2013-08-30 Fri 15:00
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:

- http://karl-voit.at/2012/07/22/example-entry/
with:
- "2012", "07", "22" being index pages (archive) containing links to all
  underlying blog entries
- "example-entry" is grabbed out of :ID: property
  - if :ID: is like "2012-07-22-example-entry" the date will be
    removed
  - if :ID: does not start with "YYYY-MM(-DD)" it gets used right away
  - user has to make sure that IDs are unique over all entries!

- http://karl-voit.at/blog/2012/11/31/This_is_the_title/index.html -> URL of
  entry; title gets parsed from heading title or ID
- http://karl-voit.at/blog/2012/11/31/ -> link to monthly overview (currently)
- http://karl-voit.at/blog/2012/11/ -> overview over the month
- http://karl-voit.at/blog/2012/ -> overview over the year
- http://karl-voit.at/blog/ -> blog starting page

- example: http://www.tbray.org/ongoing/misc/Colophon

** DONE sketch ArticleOrgEntry                                :architecture:
CLOSED: [2013-02-15 Fri 20:00]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-02-15 Fri 20:00]
:END:
:PROPERTIES:
:CREATED:  [2013-02-15 Fri 19:58]
:ARCHIVE_TIME: 2013-08-30 Fri 15:00
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:

- holds current articles parsed from Org-mode files

- ArticleOrgEntry
  - NodeList
    - first entry contains main heading
    - other entries are at least one level deeper
  - TagList
  - Title
  - ID
  - TimeCreated
  - Checksum

** DONE sketch ArticleDBEntry                                 :architecture:
CLOSED: [2013-02-15 Fri 20:00]
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-02-15 Fri 20:00]
:END:
:PROPERTIES:
:CREATED:  [2013-02-15 Fri 19:59]
:ARCHIVE_TIME: 2013-08-30 Fri 15:00
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:

- holds list of article metadata from previous run(s)

- ArticleOrgEntry
  - NodeList
    - first entry contains main heading
    - other entries are at least one level deeper
  - TagList
  - Title
  - ID
  - TimeCreated
  - Checksum

