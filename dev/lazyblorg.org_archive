
Archived entries from file /home/vk/src/lazyblorg/dev/lazyblorg.org


* Issue Tracking                                                                             :issues:

** DONE move id:2012blogwishlist-copy ideas to unique issues     :userstory:
CLOSED: [2013-02-12 Tue 10:40]
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 10:39]
:ARCHIVE_TIME: 2013-02-12 Tue 10:40
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-02-12 Tue 10:40]
:END:


** CANCELLED Configuration file = Orgmode format     :architecture:CANCELLED:
CLOSED: [2013-01-08 Tue 14:47]
:PROPERTIES:
:CREATED:  [2012-12-26 Wed 11:36]
:ARCHIVE_TIME: 2013-02-12 Tue 11:08
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: CANCELLED
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "CANCELLED"  from "STARTED"    [2013-01-08 Tue 14:47] \\
  INI is probably a better format for configuration files
:END:


- asked the Org ML
- INI file format probably a better solution

*** DONE determine best way of storing configuration :reward:Kommunikation:
CLOSED: [2013-01-02 Wed 17:22] SCHEDULED: <2012-12-30 Sun>
:PROPERTIES:
:CREATED:  [2012-12-30 Sun 18:32]
:END:
:LOGBOOK:
- State "DONE"       from "STARTED"    [2013-01-02 Wed 17:22]
:END:


- Possible methods to store configuration/settings of a weblog system
  that scans Org-mode files to generate HTML:
  - in drawers: see below
  - in tables: see below
  - in tags: see below
  - other possibilities?

- why not using elisp-methods like "setq" or "defvar" or "defcustom"?
  - this weblog will be implemented in Python
  - Sorry, I do not have any elisp knowledge and it seems to be the
    case that this is not going to change within the next months.
  - In Python I have to parse a basic sub-set of Org-mode format
    anyhow. An additional parser would be more work to do.
  - Why not using Org-mode for end-user configuration as well?
    - It's more user-friendly for non elisp users like me.

- <2013-01-02 Wed 17:21> INI-file format seems to be the better solution

**** Configuring Paths (in Drawers)
:PROPERTIES:
:COLUMNS:  %25ITEM %PATH
:CREATED:  [2013-01-07 Mon 18:40]
:END:

- advantages
  - usage of column view
  - easy to add comments for each setting
- disadvantages
  - Properties have to be the same
    - not that flexible in naming Properties

- possible name for property "VALUE" which makes it more general.

***** Image-Path
:PROPERTIES:
:PATH: ~/images
:CREATED:  [2013-01-07 Mon 18:40]
:END:

In this folder, the Web log image files are placed after being
processed (resizing, ...).

***** HTML-Path
:PROPERTIES:
:PATH: ~/blog/html
:CREATED:  [2013-01-07 Mon 18:40]
:END:

**** Configuring Paths (in Tables)
:PROPERTIES:
:CREATED:  [2013-01-07 Mon 18:40]
:END:

| *Variable*      | *Value*       | *Comments*                                          |
|-----------------+---------------+-----------------------------------------------------|
| Image Path      | ~/images      | The path where the images should be placed in.      |
| HTML Path       | ~/blog/html   | Destination path for the HTML file folder structure |
| Another Setting | another value | This has to be very short.                          |

- advantages
  - easy to write and maintain
  - quick overview
- disadvantages
  - hard to add (long) comments for each setting

**** Configuring Paths (with Tags)
:PROPERTIES:
:CREATED:  [2013-01-07 Mon 18:40]
:END:

- advantages
  - same settings can be shared through multiple tags on same value
  - easy to add comments for each setting
- disadvantages
  - seems strange at first glance; not sure if this really makes any
    sense at all
  - multiple word preference name has to be written in CamelCase or
    separated with dashes

***** ~/images                                                :ImagePath:
:PROPERTIES:
:CREATED:  [2013-01-07 Mon 18:40]
:END:

***** ~/blog/html                                              :HtmlPath:
:PROPERTIES:
:CREATED:  [2013-01-07 Mon 18:40]
:END:

** DONE CSS: format breadcrumbs                               :architecture:
CLOSED: [2013-02-12 Tue 19:36]
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 15:32]
:ARCHIVE_TIME: 2013-02-14 Thu 16:45
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-02-12 Tue 19:36]
:END:


- example: http://www.hongkiat.com/blog/breadcrumb-menu-css3/

** CANCELLED spike: calling Org-mode elisp HTML exporter from command line :architecture:ARCHIVE:
CLOSED: [2013-03-01 Fri 13:27]
:PROPERTIES:
:CREATED:  [2013-02-27 Wed 09:54]
:ARCHIVE_TIME: 2013-03-01 Fri 13:28
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: CANCELLED
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "CANCELLED"  from "STARTED"    [2013-03-01 Fri 13:27] \\
  could not make it run; idea dismissed also because of other arguments
:END:


Idea: put (partly sanitized/modified) Org-mode paragraph(s) into text
file and using Org HTML exporter to generate HTML out of it.

Weird, but it would get lazyblorg to support way more HTML entities.

- 2013-03-01: giving up the idea of using Org-mode HTML export for now.
  - could not made it work (see id:2013-03-01-org-to-html-batch)
  - it's too complicated with its dependencies
  - would require massive unit testing
  - would require modifying the generated XHTML 1.0 to HTML5 anyway
  - would require modifying the content anyway
    - match heading numbers (<h1> instead of <h2>, ...)

*** DONE Calling simple ELISP from shell
CLOSED: [2013-02-27 Wed 11:04]
:PROPERTIES:
:CREATED:  [2013-02-27 Wed 11:04]
:END:
:LOGBOOK:
- State "DONE"       from ""           [2013-02-27 Wed 11:04]
:END:


calling simple elisp as a shell script:

test.el:
#+BEGIN_SRC elisp
(print (+ 2 2))
#+END_SRC

invoking from command line:
#+BEGIN_SRC sh
emacs -Q --script ./test.el
#+END_SRC

Shorter version:
#+BEGIN_SRC sh :results output
echo "(print (+ 2 2))" >test.el | emacs -Q --script test.el ; rm test.el
#+END_SRC

#+RESULTS:
:
: 4

*** DONE Calling Org-HTML-export in ELISP
CLOSED: [2013-03-01 Fri 13:09] SCHEDULED: <2013-03-01 Fri>
:PROPERTIES:
:CREATED:  [2013-02-27 Wed 11:04]
:ID: 2013-02-27-org-to-html
:END:
:LOGBOOK:
- State "DONE"       from "STARTED"    [2013-03-01 Fri 13:09]
- State "STARTED"    from "WAITING"    [2013-03-01 Fri 12:30]
- State "WAITING"    from "STARTED"    [2013-02-27 Wed 16:35] \\
  bug report waiting for answer
- State "STARTED"    from "DONE"       [2013-02-27 Wed 11:09]
- State "DONE"       from ""           [2013-02-27 Wed 11:04]
:END:


1. export current Org-mode buffer as HTML in temp buffer
2. write temp buffer to file
3. close temp buffer

#+BEGIN_SRC elisp
(describe-function 'org-export-as-html)
#+END_SRC

#+RESULTS:
#+begin_example
org-export-as-html is an interactive compiled Lisp function.

(org-export-as-html ARG &optional HIDDEN EXT-PLIST TO-BUFFER BODY-ONLY
PUB-DIR)

Export the outline as a pretty HTML file.
If there is an active region, export only the region.  The prefix
ARG specifies how many levels of the outline should become
headlines.  The default is 3.  Lower levels will become bulleted
lists.  HIDDEN is obsolete and does nothing.
EXT-PLIST is a property list with external parameters overriding
org-mode's default settings, but still inferior to file-local
settings.  When TO-BUFFER is non-nil, create a buffer with that
name and export to that buffer.  If TO-BUFFER is the symbol
`string', don't leave any buffer behind but just return the
resulting HTML as a string.  When BODY-ONLY is set, don't produce
the file header and footer, simply return the content of
<body>...</body>, without even the body tags themselves.  When
PUB-DIR is set, use this as the publishing directory.
#+end_example

Therefore:
#+BEGIN_SRC elisp
(org-export-as-html 3 nil nil "htmlized-output" nil nil)
;(switch-to-buffer "htmlized-output")
;(write-file "~/src/lazyblorg/htmlized-out.html")
;(kill-buffer)
#+END_SRC

#+RESULTS:
: t

Results in:
#+BEGIN_VERSE
org-export-preprocess-string: Wrong number of arguments: #[(&optional sort-only) "√Ü√Ä!¬Ö ¬Ö S¬â¬Ö 
¬É 	√á_S¬Ç 	√à¬É* √â√ä\"¬Ç+ √ãP√å√ç¬â56√ç7¬äeb¬à√é ¬â6¬É√î 6@86A@98¬ÖZ √è87\"¬â:A@¬Üf T¬â;√ê68;¬Üt √ê:8<=¬É¬Ñ √á68b¬à¬Ç¬® 6A@√á68|¬à6A@b¬à√â√ë;\"c¬à<¬É¬® >¬É¬® √í ¬à:¬Ñ√ê √ê68¬Ü¬∫ √ê√ì8!8?8;?<√î9!¬Ø7B7)-¬Ç< @¬É√ï√ñ!¬Éeb¬à√ó√ò√ô@!√öQ√ç√õ#¬É√∏ √å¬î√ú√õ¬â\"|¬àdb¬à√ù√çx¬à√çy¬àn¬ÑX√û ¬à¬ÇX√ï√ñ!¬ÑXA¬É;√ü√ôA!√öQBeb¬à√óB√ç√õ#¬É:√†√°!¬à`√çy¬à`|¬à¬Ç#)√ï√¢!¬ÉUdb¬ÉU√£C√ç√õ#¬ÉU√§ ¬à¬ÇXdb¬à√• 5√¶√ç√ß√®7\"\"¬â7¬ü7√©√™7\"¬à5b¬à7?¬Ü√¢√ï√ñ!¬É¬Ö@¬É√ù√ï√ñ!¬Ñ¬™√´√çx¬à`5|¬àn¬Ñ¬õ√û ¬àA¬É√Ö√¨A√¨¬±¬à¬Ç√Ö√≠D¬ûA¬É¬æ√Æ¬ä√Ø )!¬É¬æ√¨c¬à√∞@√¨¬±¬à5√ç¬â¬ì¬à√±√≤7√¨#c¬àm?¬Ö√¢√≥c¬Ç√¢√©√¥7\".¬á" [org-inlinetask-min-level limit-level org-odd-levels-only nstars org-outline-regexp count boundp 2 "\\*" format ...] 7 ("/home/vk/.emacs.d/contrib/org-mode/lisp/org-footnote.elc" . 16141)], 2
#+END_VERSE

So, org-mode/lisp/org-footnote.elc does have an issue. I guess this is
because people are working these days on Org-8.0, especially the
exporter.

Updating Orgmode from 5d467d6f8affc0afe34922e885ac6e2492ddd091 (Fri
Feb 15 15:28:35 2013 +0100) to
692f053d8067e2314826cfcd3cf4ded7362a8dce (Wed Feb 27 14:49:46 2013
+0100)

Still facing an error:

#+BEGIN_VERSE
org-export-preprocess-string: Wrong number of arguments: #[(&optional sort-only) "√Ü√Ä!¬Ö ¬Ö S¬â¬Ö 
¬É 	√á_S¬Ç 	√à¬É* √â√ä\"¬Ç+ √ãP√å√ç¬â56√ç7¬äeb¬à√é ¬â6¬É√î 6@86A@98¬ÖZ √è87\"¬â:A@¬Üf T¬â;√ê68;¬Üt √ê:8<=¬É¬Ñ √á68b¬à¬Ç¬® 6A@√á68|¬à6A@b¬à√â√ë;\"c¬à<¬É¬® >¬É¬® √í ¬à:¬Ñ√ê √ê68¬Ü¬∫ √ê√ì8!8?8;?<√î9!¬Ø7B7)-¬Ç< @¬É√ï√ñ!¬Éeb¬à√ó√ò√ô@!√öQ√ç√õ#¬É√∏ √å¬î√ú√õ¬â\"|¬àdb¬à√ù√çx¬à√çy¬àn¬ÑX√û ¬à¬ÇX√ï√ñ!¬ÑXA¬É;√ü√ôA!√öQBeb¬à√óB√ç√õ#¬É:√†√°!¬à`√çy¬à`|¬à¬Ç#)√ï√¢!¬ÉUdb¬ÉU√£C√ç√õ#¬ÉU√§ ¬à¬ÇXdb¬à√• 5√¶√ç√ß√®7\"\"¬â7¬ü7√©√™7\"¬à5b¬à7?¬Ü√¢√ï√ñ!¬É¬Ö@¬É√ù√ï√ñ!¬Ñ¬™√´√çx¬à`5|¬àn¬Ñ¬õ√û ¬àA¬É√Ö√¨A√¨¬±¬à¬Ç√Ö√≠D¬ûA¬É¬æ√Æ¬ä√Ø )!¬É¬æ√¨c¬à√∞@√¨¬±¬à5√ç¬â¬ì¬à√±√≤7√¨#c¬àm?¬Ö√¢√≥c¬Ç√¢√©√¥7\".¬á" [org-inlinetask-min-level limit-level org-odd-levels-only nstars org-outline-regexp count boundp 2 "\\*" format ...] 7 ("/home/vk/.emacs.d/contrib/org-mode/lisp/org-footnote.elc" . 16171)], 2
#+END_VERSE

#+BEGIN_SRC elisp
(org-version)
#+END_SRC

#+RESULTS:
: 7.9.3f

- <2013-02-27 Wed> I wrote a message to the Org ML with a bug description
- <2013-02-28 Thu> Achim Gratz: "You are trying to use the old
  exporter and pick up code from an earlier version of Org."
- <2013-02-28 Thu> Erich Neuwirth: "As I learned the correct name for
  elisp to use with begin_src is emacs-lisp, not elisp"
- <2013-03-01 Fri> Nicolas Goaziou: "`org-html-export-to-html' (output to file) and `org-html-export-as-html'
  (output to temporary buffer).

  For batch processing, you can also use `org-export-as', in conjunction
  with `html' backend, which will output a string.

  There's also `org-export-string-as', which will do the same as
  `org-export-as' but will work from an input string instead of the
  current buffer."

#+BEGIN_SRC emacs-lisp
(describe-function 'org-export-as)
#+END_SRC

#+RESULTS:
#+begin_example
org-export-as is a compiled Lisp function in `ox.el'.

(org-export-as BACKEND &optional SUBTREEP VISIBLE-ONLY BODY-ONLY
EXT-PLIST)

Transcode current Org buffer into BACKEND code.

If narrowing is active in the current buffer, only transcode its
narrowed part.

If a region is active, transcode that region.

When optional argument SUBTREEP is non-nil, transcode the
sub-tree at point, extracting information from the headline
properties first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

When optional argument BODY-ONLY is non-nil, only return body
code, without surrounding template.

Optional argument EXT-PLIST, when provided, is a property list
with external parameters overriding Org default settings, but
still inferior to file-local settings.

Return code as a string.
#+end_example

#+BEGIN_SRC emacs-lisp
  (let* (
         (mycontent (org-export-as 'html t nil nil))
         )
    (with-temp-buffer
      (setq coding-system-for-write 'no-conversion)
      (insert mycontent)
      ;(set-buffer-file-coding-system 'utf-8)
      (write-file "~/src/lazyblorg/htmlized-out.html")
      )
    )
#+END_SRC

#+RESULTS:

... works :-) ... but asks for interactive charset encoding :-(
("select coding system")

- How to set encoding?
  - Variable buffer-file-coding-system -> defaults to utf-8
  - set-buffer-file-coding-system -> that's it
  - https://www.gnu.org/software/emacs/manual/html_node/elisp/Explicit-Encoding.html#Explicit-Encoding
   - "setq coding-system-for-write 'no-conversion" (added above)

... works :-)

*** Calling Org-to-HTML ELISP from command line
:PROPERTIES:
:ID: 2013-03-01-org-to-html-batch
:END:

1. start Emacs
2. activate Org
3. configure Org (?)
4. open Org-mode file
5. export as HTML in a file
6. return

**** Error: Wrong type argument: listp, "temphtmlizing" (old exporter)

First try:

#+BEGIN_SRC elisp
;; Activate UTF-8 mode:
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;; load Org
(add-to-list 'load-path "~/.emacs.d/contrib/org-mode/contrib/lisp")
(add-to-list 'load-path (expand-file-name "~/.emacs.d/contrib/org-mode/lisp"))
(require 'org)

(find-file "~/src/lazyblorg/lazyblorg.org")
(org-export-as-html 3 nil "temphtmlizing" t nil)
#+END_SRC

... results in: Wrong type argument: listp, "temphtmlizing"

Checking org-export-as-html:

test.el:
#+BEGIN_SRC elisp
;; load Org
(add-to-list 'load-path "~/.emacs.d/contrib/org-mode/contrib/lisp")
(add-to-list 'load-path (expand-file-name "~/.emacs.d/contrib/org-mode/lisp"))
(require 'org)

(print (describe-function 'org-export-as-html))
#+END_SRC

... results in ...

#+BEGIN_VERSE
vk@gary ~2d % emacs -Q --script ./test.el
Type C-x 1 to delete the help window, C-M-v to scroll help.

#("org-export-as-html is an interactive autoloaded Lisp function.

(org-export-as-html ARG &optional HIDDEN EXT-PLIST TO-BUFFER BODY-ONLY
PUB-DIR)

Export the outline as a pretty HTML file.
If there is an active region, export only the region.  The prefix
ARG specifies how many levels of the outline should become
headlines.  The default is 3.  Lower levels will become bulleted
lists.  HIDDEN is obsolete and does nothing.
EXT-PLIST is a property list with external parameters overriding
org-mode's default settings, but still inferior to file-local
settings.  When TO-BUFFER is non-nil, create a buffer with that
name and export to that buffer.  If TO-BUFFER is the symbol
`string', don't leave any buffer behind but just return the
resulting HTML as a string.  When BODY-ONLY is set, don't produce
the file header and footer, simply return the content of
<body>...</body>, without even the body tags themselves.  When
PUB-DIR is set, use this as the publishing directory." 84 87 (face help-argument-name) 98 104 (face help-argument-name) 105 114 (face help-argument-name) 115 124 (face help-argument-name) 125 134 (face help-argument-name) 135 142 (face help-argument-name) 253 256 (face help-argument-name) 385 391 (face help-argument-name) 422 431 (face help-argument-name) 565 574 (face help-argument-name) 649 658 (face help-argument-name) 767 776 (face help-argument-name) 919 926 (face help-argument-name))
vk@gary ~2d %
#+END_VERSE

... with "HIDDEN" as an additional parameter :-O

Maybe the Org-version is different?

#+BEGIN_SRC elisp
;; load Org
(add-to-list 'load-path "~/.emacs.d/contrib/org-mode/contrib/lisp")
(add-to-list 'load-path (expand-file-name "~/.emacs.d/contrib/org-mode/lisp"))
(require 'org)
(print (org-version))
#+END_SRC

-> "7.9.3e"

Interactively calling org-version: Org-mode version 7.9.3c
(release_7.9.3c-816-g409ee8 @
/home/vk/.emacs.d/contrib/org-mode/lisp/)

So basically, it matches :-O

I remember: in my Org-config, I already switched to the new
exporter. So I guess this is not done in the default setting of Org.

No, I could not find anything in my .orgmode.el that activates
something different for exporting HTML. :-(

Re-starting GNU/Emacs.

OK, now I get the error even when calling the function from within
running emacs :-O

Fixing method that worked in previous heading. See
id:2013-02-27-org-to-html for fixing this issue! (I was using the old
export method)

**** Using new exporter

: vk@gary ~2d % emacs -Q --script ./test.el

with ~2d/test.el
#+BEGIN_SRC emacs-lisp
;; Activate UTF-8 mode:
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;; load Org
(add-to-list 'load-path "~/.emacs.d/contrib/org-mode/contrib/lisp")
(add-to-list 'load-path (expand-file-name "~/.emacs.d/contrib/org-mode/lisp"))
(require 'org)

(find-file "~/src/lazyblorg/lazyblorg.org")

(let* (
       (mycontent (org-export-as 'html t nil nil))
       )
  (with-temp-buffer
    (setq coding-system-for-write 'no-conversion)
    (insert mycontent)
    (write-file "~/src/lazyblorg/htmlized-out.html")
    )
  )
#+END_SRC

... results in:
#+BEGIN_VERSE
vk@gary ~2d % emacs -Q --script ./test.el
OVERVIEW
Loading vc-git...
Before first headline at position 1 in buffer lazyblorg.org
255 vk@gary ~2d %
#+END_VERSE
... caused by the org-export-as function

Tested:
#+BEGIN_SRC emacs-lisp
;; load Org
(add-to-list 'load-path "~/.emacs.d/contrib/org-mode/contrib/lisp")
(add-to-list 'load-path (expand-file-name "~/.emacs.d/contrib/org-mode/lisp"))
(require 'org)

(find-file "~/src/lazyblorg/lazyblorg.org")
(outline-next-visible-heading)
(org-export-as 'html t nil nil)
#+END_SRC
... with:

#+BEGIN_VERSE
vk@gary ~2d % emacs -Q --script ./test.el
OVERVIEW
Loading vc-git...
Wrong number of arguments: #[(arg) ÔøΩWÔøΩÔøΩ ÔøΩÔøΩÔøΩÔøΩÔøΩoÔøΩÔøΩWÔøΩ@oÔøΩ:ÔøΩÔøΩ
ÔøΩQÔøΩÔøΩ#ÔøΩÔøΩ:ÔøΩÔøΩ
          ÔøΩ4`ÔøΩ\")TÔøΩmÔøΩÔøΩVÔøΩpmÔøΩjÔøΩÔøΩ
ÔøΩQÔøΩÔøΩ#ÔøΩÔøΩjƒîÔøΩ
          ÔøΩd`ÔøΩ\")ÔøΩSÔøΩ@   ÔøΩvÔøΩ )ÔøΩ" [arg found-heading-p outline-regexp pos 0 beginning-of-line nil re-search-backward "^\\(?:" "\\)" ...] 4 ("/usr/share/emacs/23.4/lisp/outline.elc" . 24841) "p"], 0
255 vk@gary ~2d %
#+END_VERSE

... OK, giving up the idea of using Org-mode HTML export for now.

** CANCELLED idea: generate article body using Org-exporter :architecture:ARCHIVE:
CLOSED: [2013-02-14 Thu 17:21]
:PROPERTIES:
:CREATED:  [2013-02-14 Thu 17:17]
:ARCHIVE_TIME: 2013-05-21 Tue 21:36
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: CANCELLED
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "CANCELLED"  from "NEXT"       [2013-02-14 Thu 17:21]
:END:


- header, title, footer: generate using Python
- main body: generate using Org-mode and temp-buffer using for
  converting

- advantages
  - Blog can parse/generate everything the Org-exporter can parse

- disadvantages
  - no custom links to other blog entries
    - or not that easy to implement
  - dependency to a running Emacs instance
    - configuration issues
    - path issues
    - performance issues(!)
      - each article has to be exported in one single export of its
        own
  - might cause some issues when Org-exporter changes

- <2013-02-14 Thu> so far, I do not consider the issue with external
  dependency to Emacs as negative

** CANCELLED create Module for constants              :architecture:ARCHIVE:
CLOSED: [2013-05-21 Tue 20:54]
:PROPERTIES:
:CREATED:  [2013-02-17 Sun 13:10]
:ARCHIVE_TIME: 2013-05-21 Tue 21:37
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: CANCELLED
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2013-05-21 Tue 20:54] \\
  I used class constants (so far)
:END:


- for defining/customizing HTML snippets, basic structure and so on

** DONE tools: parse timestamps                               :architecture:
CLOSED: [2013-05-21 Tue 20:55]
:PROPERTIES:
:CREATED:  [2013-02-14 Thu 17:30]
:ARCHIVE_TIME: 2013-05-21 Tue 21:37
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2013-05-21 Tue 20:55]
:END:


- example: parse_datetime() in https://github.com/bjonnh/PyOrgMode/blob/master/PyOrgMode.py
- I used orgformat.py from Memacs

** DONE spike: parsing Org-mode files in Python               :architecture:
CLOSED: [2013-05-21 Tue 20:54]
:PROPERTIES:
:CREATED: [2012-07-22 Sun 18:08]
:ARCHIVE_TIME: 2013-05-21 Tue 21:37
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-05-21 Tue 20:54]
:END:


- https://github.com/bjonnh/PyOrgMode
- list of several Python parsers: https://github.com/julian-gehring/worg/blob/master/org-tools/index.org
  - http://members.optusnet.com.au/~charles57/GTD/orgnode.html
    - MIT license
    - last change: 2009-06
    - is able to read node by node (=heading)
    - return (unmodified) body of each node
    - returns tags and properties
    - looks usable
    - code no that big
    - probably: have to extend parser for LOGBOOK-drawers
  - https://github.com/bjonnh/PyOrgMode
    - GPL v3
    - last change: 2012-10
    - very few documentation available
    - long [[https://github.com/bjonnh/PyOrgMode/blob/master/TODO][list of open todos]]

- <2013-02-14 Thu> looks like I'm gonna stick to OrgNode for now

** DONE create Module for tool methods                        :architecture:
CLOSED: [2013-05-21 Tue 20:54]
:PROPERTIES:
:CREATED:  [2013-02-17 Sun 13:07]
:ARCHIVE_TIME: 2013-05-21 Tue 21:37
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2013-05-21 Tue 20:54]
:END:


- http://docs.python.org/2/tutorial/modules.html
- tools.OrgParserTools (?)

** DONE find Python checksum algorithm                        :architecture:
CLOSED: [2013-02-15 Fri 20:06]
:PROPERTIES:
:CREATED:  [2013-02-15 Fri 20:03]
:ID: 2013-02-15-checksum
:ARCHIVE_TIME: 2013-08-22 Thu 11:43
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-02-15 Fri 20:06]
:END:


- http://docs.python.org/2/library/hashlib.html#module-hashlib
- http://code.wikia.com/wiki/SHA_checksum#Python
- https://en.wikipedia.org/wiki/Cryptographic_hash_function#Cryptographic_hash_algorithms

- sha1 or md5 seems a good choice

example:
#+BEGIN_SRC python
import hashlib
converted = hashlib.sha1("My text").hexdigest()
#+END_SRC

- checksum over:
  - data['title']
  - data['timestamp'] ?
  - data['tags']
  - data['content']

** DONE spike: storing data objects in Python                 :architecture:
CLOSED: [2013-08-20 Tue 13:40]
:PROPERTIES:
:CREATED:  [2013-08-20 Tue 11:10]
:ARCHIVE_TIME: 2013-08-22 Thu 11:43
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-08-20 Tue 13:40]
:END:


- http://docs.python.org/2/library/pickle.html
  - serialization, storing to disk
  - storage format defined by: protocol version
    - Protocol version 0 is the original ASCII protocol and is
      backwards compatible with earlier versions of Python.
    - Protocol version 1 is the old binary format which is also
      compatible with earlier versions of Python.
    - Protocol version 2 was introduced in Python 2.3. It provides
      much more efficient pickling of new-style classes.
    - HIGHEST_PROTOCOL -> uses 2 if 2 is still the highest format

- example:
  http://stackoverflow.com/questions/4529815/how-to-save-an-object-in-python
#+BEGIN_SRC python
import pickle

class Company:
    def __init__(self, name, value):
        self.name = name
        self.value = value

format = pickle.HIGHEST_PROTOCOL
format = 0

with open('company_data.pk', 'wb') as output:
    company1 = Company('banana', 40)
    pickle.dump(company1, output, format)

    company2 = Company('spam', 42)
    pickle.dump(company2, output, format)

company1 = None
company2 = None

with open('company_data.pk', 'rb') as input:
    company1 = pickle.load(input)
    print company1.name
    # banana
    print company1.value
    # 40

    company2 = pickle.load(input)
    print company2.name
    # spam
    print company2.value
    # 42
#+END_SRC

- works (not in babel above but in separate file)
  - not working in babel because babel-code is put into separate
    sub-class and store-object of pickle must not be a sub-class at
    all

** DONE create template file(s) for HTML snippets             :architecture:
CLOSED: [2013-08-20 Tue 18:58]
:PROPERTIES:
:CREATED:  [2013-03-13 Wed 10:21]
:ID: 2013-03-13-HTML-template-file
:ARCHIVE_TIME: 2013-08-22 Thu 11:44
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "STARTED"    [2013-08-20 Tue 18:58]
:END:


- lazyblorg/templates/blog-format.org
  - article
    - header
    - footer
    - title
    - tags
    - tag
    - heading
    - par
    - <all other recognized entities>
  - <misc meta-pages like jump-pages and so on>

Example:

#+NAME: par
#+BEGIN_HTML

<p>

#CONTENT#

</p>

#+END_HTML

(if single line, lazyblorg trims the strings)

- Org-mode format "header"
- HTML src block with actual template
- #LB-TITLE# -> title
- #LB-AUTHOR# -> Authors name
- and so on

** DONE parse format template file                            :architecture:
CLOSED: [2013-08-22 Thu 11:39]
:PROPERTIES:
:CREATED:  [2013-08-20 Tue 19:04]
:ARCHIVE_TIME: 2013-08-22 Thu 11:44
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-08-22 Thu 11:39]
:END:


- history/idea: see id:2013-03-13-HTML-template-file

** DONE logs: lazyblorg-log.org                               :architecture:
CLOSED: [2013-08-22 Thu 11:43]
:PROPERTIES:
:CREATED:  [2013-01-12 Sat 13:43]
:ARCHIVE_TIME: 2013-08-22 Thu 11:44
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2013-08-22 Thu 11:43]
:END:


format example:
: * lazyblorg logs                                         :lazyblorg:BLOGNAME:
: ** [2013-01-12 Sat 13:44] lazyborg-run started
: 2013-01-12 Sat 13:44 do this
: 2013-01-12 Sat 13:45 did that
: *** <2013-01-12 Sat 13:46> ERROR: error description
: *** <2013-01-12 Sat 13:46> WARNING: error description

** DONE [#A] test compare_blog_metadata()                            :tests:
CLOSED: [2013-08-27 Tue 20:54]
:PROPERTIES:
:CREATED:  [2013-08-22 Thu 23:38]
:ARCHIVE_TIME: 2013-08-27 Tue 20:55
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "STARTED"    [2013-08-27 Tue 20:54]
:END:


- [X] test-Org-mode
  - all eight cases:
    1. new ID found -> generate, mark_for_feed
    2. no ID found -> is not possible here any more since metadata
      (dict) contains only entries with IDs -> should be done in parser:
      WARN, ignore
    3. CREATED not found -> WARN, ignore
    4. CREATED found but differs from previous run (should not change)
       -> WARN, ignore
    5. known and matching previous run: ID, CREATED, checksum;
       differs: timestamp
       -> generate
    6. known and matching previous run: ID, CREATED, checksum, timestamp
       -> generate
    7. known and matching: ID, CREATED, last timestamp; differs:
       checksum -> silent update -> generate
    8. known and matching: ID, CREATED; differs: checksum, last
      timestamp -> normal update -> generate, mark_for_feed,
      increment_version
  - how to create test.org
    - cases that need first run: 4, 5, 6, 7, 8
    - cases introduced in second run: 1, 2, 3,
    - cases that need modification from first to second: 4, 5, 7, 8
- [X] write test class: lazyblorg.py
- [X] test-previous_metadata file
- [X] test-metadata file

** DONE create a new module lib/htmlizer.py                   :architecture:
CLOSED: [2013-08-27 Tue 21:12]
:PROPERTIES:
:CREATED:  [2013-08-22 Thu 21:15]
:ARCHIVE_TIME: 2013-08-27 Tue 21:12
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-08-27 Tue 21:12]
:END:


- holds everything which is needed for generating HTML/CSS output files

** DONE Idea: do paragraph parsing                            :architecture:
CLOSED: [2013-08-30 Fri 14:58]
:PROPERTIES:
:CREATED:  [2013-02-27 Wed 16:48]
:ARCHIVE_TIME: 2013-08-30 Fri 14:58
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2013-08-30 Fri 14:58]
:END:


- paragraphs are separated by at least one empty line OR they end
  with a line starting with:
  - ¬ª#+¬´
- each paragraph is handled separately BUT paragraphs of an
  environment are being combined
- for each normal text paragraph:
  - remove \n
  - sanitize
    - insert lazyblorg-specific links
    - HTMLize with ...
      - either simple with own code OR
        - fast
        - only a few syntax elements can be parsed
      - using Org-mode exporter methods
        - slow
        - complicated set-up
        - supports everything which is supported by the Org-mode HTML
          export
    - if simple HTMLizer chosen:
      - re-insert \n for first space after 80 characters

Documentation:
- clearly state that lazyblorg does support *no org-mode syntax*
  except <list-of-supported-elements-and-their-context>

** DONE [#A] define (link) structure of blog entries                 :tests:
CLOSED: [2013-02-12 Tue 14:11]
:PROPERTIES:
:CREATED: [2012-07-22 Sun 17:29]
:ARCHIVE_TIME: 2013-08-30 Fri 15:00
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-02-12 Tue 14:11]
:END:


- http://karl-voit.at/2012/07/22/example-entry/
with:
- "2012", "07", "22" being index pages (archive) containing links to all
  underlying blog entries
- "example-entry" is grabbed out of :ID: property
  - if :ID: is like "2012-07-22-example-entry" the date will be
    removed
  - if :ID: does not start with "YYYY-MM(-DD)" it gets used right away
  - user has to make sure that IDs are unique over all entries!

- http://karl-voit.at/blog/2012/11/31/This_is_the_title/index.html -> URL of
  entry; title gets parsed from heading title or ID
- http://karl-voit.at/blog/2012/11/31/ -> link to monthly overview (currently)
- http://karl-voit.at/blog/2012/11/ -> overview over the month
- http://karl-voit.at/blog/2012/ -> overview over the year
- http://karl-voit.at/blog/ -> blog starting page

- example: http://www.tbray.org/ongoing/misc/Colophon

** DONE sketch ArticleOrgEntry                                :architecture:
CLOSED: [2013-02-15 Fri 20:00]
:PROPERTIES:
:CREATED:  [2013-02-15 Fri 19:58]
:ARCHIVE_TIME: 2013-08-30 Fri 15:00
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-02-15 Fri 20:00]
:END:


- holds current articles parsed from Org-mode files

- ArticleOrgEntry
  - NodeList
    - first entry contains main heading
    - other entries are at least one level deeper
  - TagList
  - Title
  - ID
  - TimeCreated
  - Checksum

** DONE sketch ArticleDBEntry                                 :architecture:
CLOSED: [2013-02-15 Fri 20:00]
:PROPERTIES:
:CREATED:  [2013-02-15 Fri 19:59]
:ARCHIVE_TIME: 2013-08-30 Fri 15:00
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-02-15 Fri 20:00]
:END:


- holds list of article metadata from previous run(s)

- ArticleOrgEntry
  - NodeList
    - first entry contains main heading
    - other entries are at least one level deeper
  - TagList
  - Title
  - ID
  - TimeCreated
  - Checksum

** DONE separate blogdata structures via tags                 :architecture:
CLOSED: [2013-10-19 Sat 18:52]
:PROPERTIES:
:CREATED:  [2013-09-15 Sun 19:38]
:ARCHIVE_TIME: 2013-10-19 Sat 18:52
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-10-19 Sat 18:52]
:END:


- all articles got :blog:
  - :lb_tag: -> create example.com/blog/tags/<tagname=article name>
    - description of tags
    - __blog_data['TAGS']
    - TAG_FOR_TAG_ENTRY = 'lb_tag'
  - :lb_persistent: -> create example.com/blog//<article name>
    - __blog_data['PERSISTENT']
    - TAG_FOR_PERSISTENT_ENTRY = 'lb_persistent'
  - else: normal blog articles example.com/blog/2013/12/31/<name>
    - __blog_data['TEMPORAL']

- adopt method for getting link to any article; get also URL of it
  (relative to /) (see id:2013-09-29-get-link)

- <2013-10-19 Sat> finished refactoring:
  - instead of __blog_data['PERSISTENT'] I am not using
    __blog_data[id]['category'] including categories in metadata as well

** DONE make sure that tags are irrelevant for updates           :userstory:
CLOSED: [2014-01-29 Wed 17:51]
:PROPERTIES:
:CREATED:  [2013-12-12 Do 10:53]
:ARCHIVE_TIME: 2014-01-29 Wed 17:51
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-01-29 Wed 17:51]
:END:


- when I change lots of tags (only), their articles should not be
  listed as updated (in feed and such)

** DONE parse URLs to href                                       :userstory:
CLOSED: [2014-01-30 Thu 15:12] SCHEDULED: <2014-01-30 Thu>
:PROPERTIES:
:CREATED:  [2014-01-30 Thu 13:48]
:ARCHIVE_TIME: 2014-01-30 Thu 15:12
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-01-30 Thu 15:12]
:END:


: http://heise.de
: [[http://heise.de]]
: [[http://heise.de][heise]]

** DONE make alpha version of blog available on my domain            :tests:
CLOSED: [2014-01-31 Fr 11:01]
:PROPERTIES:
:CREATED:  [2014-01-29 Wed 22:40]
:ARCHIVE_TIME: 2014-01-31 Fr 11:01
:ARCHIVE_FILE: c:/Users/karl.voit/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-01-31 Fr 11:01]
:END:


- why
  - get feedback from real-world data
  - be able to tweet URLs of (very simple) blog entries
- how
  - [X] site-logo (in SVG) as hard-coded URL in template?
  - [X] write "public voit Introduction"
  - [X] embed inline-CSS
  - [X] simplified layout

** DONE nicely draw tags around tags                             :userstory:
CLOSED: [2014-01-31 Fri 18:17] SCHEDULED: <2014-01-31 Fr>
:PROPERTIES:
:CREATED:  [2014-01-31 Fr 11:01]
:ARCHIVE_TIME: 2014-01-31 Fri 18:17
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "STARTED"    [2014-01-31 Fri 18:17]
:END:


- http://cssglobe.com/pure-css3-post-tags/

** DONE adopt CSS from http://cssglobe.com/lab/css3_tags/01.html :architecture:
CLOSED: [2014-01-31 Fri 18:17] SCHEDULED: <2014-01-31 Fr>
:PROPERTIES:
:CREATED:  [2014-01-31 Fr 11:08]
:ARCHIVE_TIME: 2014-01-31 Fri 18:17
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "STARTED"    [2014-01-31 Fri 18:17]
:END:


- rounded corners
- CSS style information tag

** DONE setting up test entry and resulting data                     :tests:
CLOSED: [2013-02-12 Tue 14:13] SCHEDULED: <2013-02-12 Tue>
:PROPERTIES:
:CREATED: [2012-04-17 Tue 14:08]
:ARCHIVE_TIME: 2014-02-01 Sat 14:49
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-02-12 Tue 14:13]
:END:


- my local copy:
  - file:///home/vk/src/lazyblorg/testdata/full_test/blog/2013/02/12/lazyblorg-example-entry/index.html
- http://www.w3schools.com/tags/default.asp

- [X] Org-mode example files
  - containing non blogging content *and* headings marked with ":blog:" tag
  - containing the string ":blog:" as non-tag
  - containing org-mode blog entries in different hierarchy depth
- [X] containing elements:
  - headings 1-3
  - paragraphs
  - external links (URLs)
  - itemize-list
  - verse-block
  - no images yet
- [X] corresponding resulting HTML(5) files
  - meaning of HTML5 elements: [[http://stackoverflow.com/questions/4781077/html5-best-practices-section-header-aside-article-tags/6527766#6527766][short overview on stackoverflow]]
    - small: small print for legalese, or terms and conditions
    - em: emphasizing
    - header: on top of document or "section"; defined by its content
      (not position)
    - footer: at bottom of document or "section"; contains
      information about containing elements
    - aside: side bar; defined by content, not position; for related
      information; e.g., pullquotes
    - nav: major navigation information
    - article: content that would probably go together for feed feed
    - section: content that is grouped; consider "header", "footer",
      "nav", "sidebar", "article" as special kind of sections
    - hgroup: grouping headings (for overview/index)
    - date/time:
      - <time datetime="17:00">5pm</time>
      - <time datetime="2010-04-07">April 7th</time>
      - <time datetime="2010-04-07T17:00">5pm on April 7th</time>
      - <time>5pm on April 7th</time>
      - "pubdate" attribute has been removed from the standard and is
        considered invalid on http://html5.validator.nu/
- no CSS yet

** DONE sketch article layout                                    :userstory:
CLOSED: [2013-02-14 Thu 16:44]
:PROPERTIES:
:CREATED:  [2013-02-14 Thu 16:39]
:ARCHIVE_TIME: 2014-02-01 Sat 14:49
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2013-02-14 Thu 16:44]
:END:


#+BEGIN_VERSE

MyBlog > 2013 > 02 > 14                               Published: 2013-02-14 T 16:40

               This is my Title About Something                Tag1 Foo Bar lang:en

    <article body text>




About this Blog                                                      check HTML/CSS
#+END_VERSE

- Breadcrumbs: gray
- Published...: gray
- Title(s): dark turquoise
- Tags: gray
- body: black
- About this: gray, small
- check ...: gray, small
- background: bright yellowish with possible gradient from dark (top)
  to bright (bottom)

** DONE implement basic work-flow *stub*                      :architecture:
CLOSED: [2014-02-01 Sat 13:53]
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 10:37]
:ARCHIVE_TIME: 2014-02-01 Sat 14:55
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "STARTED"    [2014-02-01 Sat 13:53]
:END:


- *no working version, only work-flow stub*, which will be filled with
  the actual code later on

invoking source code:
#+BEGIN_VERSE
vk@gary ~/src/lazyblorg (git)-[master] % PYTHONPATH="~/src/lazyblorg:" ./lazyblorg.py testdata/manual_prototype/org/test.org --targetdir testdata/2del -v
DEBUG    2013-05-20 17:58:02,643 extracting list of Org-mode files ...
DEBUG    2013-05-20 17:58:02,643 len(args) [1]
DEBUG    2013-05-20 17:58:02,643 1 filenames found: [testdata/manual_prototype/org/test.org]
DEBUG    2013-05-20 17:58:02,643 iterate over files ...
DEBUG    2013-05-20 17:58:02,644 OrgParser: doing file "testdata/manual_prototype/org/test.org" ...
DEBUG    2013-05-20 17:58:02,644 OrgParser: finished on file "testdata/manual_prototype/org/test.org"
DEBUG    2013-05-20 17:58:02,644 successfully finished.
vk@gary ~/src/lazyblorg (git)-[master] %
#+END_VERSE

- [X] find all headings with state DONE and tag :blog:
  - optionally: add all other tags starting with "blog-" as blog tags

- [X] one entry starts at such a heading until EOF OR same or less level
  heading is found

- [X] create checksum (see id:2013-02-15-checksum)
  - data['title']
  - data['timestamp']
  - data['tags']
  - data['content']

- [X] compare raw text and IDs with last run

  - known ID, raw text unchanged: ignore, no change

- [X] generate output files

  - new ID
    - generate new blog entry
      - extract YYYY-MM-DD from LOGBOOK-drawer (first *->DONE transformation)
      - generate YYYY/MM/DD-folder structure in blog accordingly
      - generate sanitized blog title as file name

- [-] on any error:
  - [X] create an orgmode event from current time that appears on agenda
  - [X] with daily repeat -> so it gets noticed on the following day(s) too
  - [-] in the description of that entry:
    - BONUS: babel-sh-snippet with prepared command to re-try the
      run :-)

- [ ] mark Updates

  - known ID, raw text differs
    - generate update of existing entry
      - add "(Update n)" (with n is the n-th update) to entry title
        - optionally: add this also to URL
          - disadvantage: broken old URLs
          - advantage: URL reflects update state
        - ALTERNATIVELY: add "(Update YYYY-MM-DD)" instead of number
          - numbers don't mean anything

- on any activity:
  - [ ] re-write feed feed for last n entries
  - [ ] optionally: generate overview page for last n entries
  - [ ] optionally: generate calendar archive page(s)
  - [ ] optionally: generate tag overview page(s)

** DONE CSS: manually create CSS for an entry                 :architecture:
CLOSED: [2014-02-01 Sat 15:26]
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 14:14]
:ARCHIVE_TIME: 2014-02-01 Sat 15:26
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-02-01 Sat 15:26]
:END:


** DONE move all inline CSS from blog-format.org into CSS file :architecture:
CLOSED: [2014-02-01 Sat 15:29]
:PROPERTIES:
:CREATED:  [2014-01-30 Thu 15:52]
:ARCHIVE_TIME: 2014-02-01 Sat 15:29
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-02-01 Sat 15:29]
:END:


** DONE CSS: add slightly yellowish background                   :userstory:
CLOSED: [2014-02-01 Sat 15:30]
:PROPERTIES:
:CREATED: [2012-05-11 Fri 09:36]
:ARCHIVE_TIME: 2014-02-01 Sat 15:30
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2014-02-01 Sat 15:30]
:END:


- if possible: very smooth color gradient from top to bottom

** DONE [#C] Inline HTML                                         :userstory:
CLOSED: [2014-02-01 Sat 15:35]
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 10:32]
:ARCHIVE_TIME: 2014-02-01 Sat 15:35
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2014-02-01 Sat 15:35]
:END:


- writing HTML tags directly (not within any SRC-blocks)
- makes it easier to port old blog content

** CANCELLED [#C] content of help pages from Org heading :userstory:ARCHIVE:
CLOSED: [2014-02-01 Sat 15:36]
:PROPERTIES:
:CREATED:  [2013-02-27 Wed 16:37]
:ARCHIVE_TIME: 2014-02-01 Sat 15:36
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: CANCELLED
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2014-02-01 Sat 15:36] \\
  not a good idea any more
:END:


Somewhere in my Org files, I do have a heading ¬´$BLOGNAME¬ª. Within
its sub-heading ¬´Help¬ª there is the text for the main help
page. Further headings contain more content for other pages.

** DONE [#A] find out about usage of what time-stamp          :architecture:
CLOSED: [2014-02-01 Sat 20:06]
:PROPERTIES:
:CREATED:  [2014-02-01 Sat 14:20]
:ARCHIVE_TIME: 2014-02-01 Sat 20:06
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-02-01 Sat 20:06]
:END:


- meta-data file
- to determine the time of publishing
- and so forth

- see id:2014-02-01-time-stamps

** DONE [#A] compare status with published version of meta-data :architecture:
CLOSED: [2014-02-01 Sat 21:02]
:PROPERTIES:
:CREATED:  [2014-02-01 Sat 14:15]
:ARCHIVE_TIME: 2014-02-01 Sat 21:02
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-02-01 Sat 21:02]
:END:


- up to now:
  - lazyblorg generates meta-data from the parsed Org-mode data and
    compares it with a metadata.pk file from the previous run

- in future:
  - the new meta-data will be compared with the metadata.pk from the webspace
    - can be local public_html folder

- why?
  - this way, I can locally re-run the blog generating step as often
    as I want without messing up the update information and such

- how?
  - additional command line parameter "--previous-metadata"
  - renaming old command line parameter "metadata" to "--new-metadata"
  - probably continue current functionality if both are same?

- new checks:
  - [X] both parameters are required ones
  - [X] previous and new one can be missing
  - [X] new one can exist, will be silently overwritten

** DONE htmlizer: return string of file, not writing directly :architecture:
CLOSED: [2014-02-02 Sun 12:26]
:PROPERTIES:
:CREATED:  [2014-02-02 Sun 11:57]
:ARCHIVE_TIME: 2014-02-02 Sun 12:26
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-02-02 Sun 12:26]
:END:


** DONE handle :noexport: tag
CLOSED: [2014-02-02 Sun 13:46] SCHEDULED: <2014-02-02 Sun>
:PROPERTIES:
:CREATED:  [2013-08-22 Thu 11:45]
:ARCHIVE_TIME: 2014-02-02 Sun 13:46
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-02-02 Sun 13:46]
- State "SOMEDAY"    from ""           [2013-08-22 Thu 11:45]
:END:


- see http://orgmode.org/manual/Selective-export.html
- is handy for ignoring non-supported headings in syntax test file :-)

** DONE unit-testing Org-file to HTML snippet                        :tests:
CLOSED: [2014-02-02 Sun 19:22] SCHEDULED: <2014-02-02 Sun>
:PROPERTIES:
:CREATED:  [2014-02-02 Sun 11:56]
:ARCHIVE_TIME: 2014-02-02 Sun 19:22
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-02-02 Sun 19:22]
:END:


- parsing a test file -> parse_orgmode_file()
  - probably: taking only one specific ID from it?
  - assert entry
- apply htmlizer -> init() + copy few lines from run()
- compare string with expected output

- [X] add links to test-org in README and notes

** DONE fix htmlizer-bug (see deactivated tests)                       :bug:
CLOSED: [2014-02-25 Tue 19:37] SCHEDULED: <2014-02-28 Fri>
:PROPERTIES:
:CREATED:  [2014-02-14 Fr 09:30]
:ARCHIVE_TIME: 2014-02-25 Tue 19:37
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-02-25 Tue 19:37]
- Rescheduled from "2014-02-23 Sun" on [2014-02-24 Mon 20:15]
- Rescheduled from "2014-02-15 Sa" on [2014-02-19 Wed 22:01]
:END:


** DONE test generate_output (comparing HTML/CSS output files)       :tests:
CLOSED: [2014-02-27 Thu 22:21]
:PROPERTIES:
:CREATED:  [2013-02-14 Thu 17:28]
:ARCHIVE_TIME: 2014-02-27 Thu 22:21
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "STARTED"    [2014-02-27 Thu 22:21]
:END:


- Python: comparing files/directories: http://docs.python.org/2/library/filecmp.html

- example: https://github.com/bjonnh/PyOrgMode/blob/master/test.py
  - comparing Org-mode files line-by-line

*** Idea: parse content test cases from Org file

A file like ¬´tests.org¬ª contains test cases, each one in a
heading. if it starts with ¬´test: ¬ª it is a test case followed by its
test name.

A sub-heading ¬´Org¬ª contains the Org-mode document/snippet which gets
parsed.

A sub-heading ¬´result¬ª contains the results which is expected.

** DONE collect Org-mode data & provide download link on each page :userstory:
CLOSED: [2014-02-27 Thu 22:21]
:PROPERTIES:
:CREATED:  [2014-02-20 Do 15:48]
:ARCHIVE_TIME: 2014-02-27 Thu 22:21
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2014-02-27 Thu 22:21]
:END:


- collect data
  - omit :noexport: headings

** DONE delete prefix in path                                 :architecture:
CLOSED: [2014-03-02 Sun 12:59] SCHEDULED: <2014-03-02 Sun>
:PROPERTIES:
:CREATED:  [2014-03-02 Sun 11:11]
:ARCHIVE_TIME: 2014-03-02 Sun 12:59
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-03-02 Sun 12:59]
:END:


** DONE HTML: manually create main jumping page               :architecture:
CLOSED: [2014-03-02 Sun 18:00] SCHEDULED: <2014-03-02 Sun>
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 12:24]
:ARCHIVE_TIME: 2014-03-02 Sun 18:00
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "STARTED"    [2014-03-02 Sun 18:00]
- Rescheduled from "2014-03-01 Sat" on [2014-03-01 Sat 23:08]
:END:


- HTML5-example: see Kr√∂ner2011 p.123ff

** DONE parse/htmlize: internal links                            :userstory:
CLOSED: [2014-03-03 Mon 20:50] SCHEDULED: <2014-03-03 Mon>
:PROPERTIES:
:CREATED:  [2014-02-01 Sat 15:25]
:ARCHIVE_TIME: 2014-03-03 Mon 20:50
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "STARTED"    [2014-03-03 Mon 20:50]
:END:


- to other blog articles, persistent pages, tag pages
- by ID
- recognize: "[[id:foobar]]"

- [X] htmlizer.py: def sanitize_internal_links(self, sourcecategory, content):
  - error, if ID not found in blog_data!

- [X] htmlizer_tests.py: def test_sanitize_internal_links(self):

- [X] add section to testdata/currently_supported_orgmode_syntax.org
  - section including HTML result draft already exists but is tagged
    with NOEXPORT!

** DONE INFO: stats on files, headings and entries processed          :wish:
CLOSED: [2014-03-08 Sat 20:36] SCHEDULED: <2014-03-08 Sat>
:PROPERTIES:
:CREATED:  [2014-02-09 Sun 10:31]
:ARCHIVE_TIME: 2014-03-08 Sat 20:36
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "STARTED"    [2014-03-08 Sat 20:36]
:END:


Example:
: Parsed:    16 Org-mode files with 422933 lines
: Generated 144 articles: 23 temporal, 12 persistent, 79 tag

- orgparser
  - # files
  - # org lines parsed
- htmlizer
  - # total pages
  - # temporal
  - # persistent
  - # tag-articles

** DONE implement: creating PERSISTENT pages                     :userstory:
CLOSED: [2014-03-08 Sat 22:35] SCHEDULED: <2014-03-08 Sat>
:PROPERTIES:
:CREATED:  [2013-10-19 Sat 18:50]
:ID: 2013-10-19-persistent-pages
:ARCHIVE_TIME: 2014-03-08 Sat 22:35
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "STARTED"    [2014-03-08 Sat 22:35]
- Not scheduled, was "2014-03-03 Mon" on [2014-03-02 Sun 19:26]
- Rescheduled from "2014-03-01 Sat" on [2014-03-01 Sat 23:08]
:END:


1. [X] define tag to mark persistent pages
   - tag: ~persistent~
2. [X] adopt parsing in org-arser.py
3. [X] adopt generating in htmlizer.py
4. [X] test ID-links from temporal and persistent pages
5. [X] add documentation

** DONE documentation: describe tags for templates, persistent, tag, and normal :userstory:
CLOSED: [2014-03-08 Sat 22:41]
:PROPERTIES:
:CREATED:  [2013-10-19 Sat 18:01]
:ARCHIVE_TIME: 2014-03-08 Sat 22:41
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2014-03-08 Sat 22:41]
:END:


- emphasize that templates, persistent, tag are mutual exclusive tags!

** DONE blog comments                                            :userstory:
CLOSED: [2014-03-09 Sun 16:21]
:PROPERTIES:
:CREATED:  [2013-02-12 Tue 10:35]
:ARCHIVE_TIME: 2014-03-09 Sun 16:21
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "SOMEDAY"    [2014-03-09 Sun 16:21]
- State "SOMEDAY"    from ""           [2013-02-12 Tue 10:35]
:END:


- simplest form: generate unique Email link and add at bottom
  - very easy to be done for catch-all MTAs
  - automatically derive whitelist for MTA to avoid old spam
- simple HTML form
  - POST to script, adding comment to my inbox.org (containing
    link to ID)
- disqus: I do not want to outsource comment hosting :-(

- [2014-03-09 Sun] I settled for Disqus (and optional email comments)
  for now
  - privacy-aware people don't have Scripts enabled anyway :-)

** DONE add performance-statistics of parsing and htmlizing      :userstory:
CLOSED: [2014-03-09 Sun 19:56]
:PROPERTIES:
:CREATED:  [2014-03-09 Sun 19:38]
:ARCHIVE_TIME: 2014-03-09 Sun 19:56
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-03-09 Sun 19:56]
:END:


- not only lines processed but also duration

** DONE [#A] provide feed(s)                                      :userstory:
CLOSED: [2014-03-16 Sun 20:33]
:PROPERTIES:
:CREATED:  [2012-11-05 Mon 10:57]
:ID: 2012-11-05-lb-rss
:ARCHIVE_TIME: 2014-03-16 Sun 20:33
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-03-16 Sun 20:33]
:END:


- sorted by last date within LOGBOOK or PROPERTIES drawers
- one general feed
- one feed for each tag
- ? differ heading-only feeds and full feeds
  - OR: use only full feeds

- self-generating XML is not that hard to do
  - RSS example: [[tsfile:2014-03-10-heise-example.rss]]

- Differences between RSS and Atom?
  - http://blog.webreakstuff.com/2005/07/rss-vs-atom-you-know-for-dummies/
  - http://www.intertwingly.net/wiki/pie/Rss20AndAtom10Compared

- python
  - http://bytes.com/topic/python/answers/769576-there-any-generic-rss-atom-generator-python
    - "I wouldn't generate XML directly but using ElementTree to
      generate Atom. I did it myself three months ago and it was
      really trivial."
    - http://search.cpan.org/~miyagawa/XML-Atom-0.28/lib/XML/Atom/Feed.pm
    - http://www.imc.org/atom-syntax/mail-archive/msg18662.html
    - http://blog.ianbicking.org/2007/08/02/atom-models/
    - http://codespeak.net/lxml/objectify.html#tree-generation-with-the-e-factory
    - https://github.com/lkiesow/python-feedgen
      - looks promising
    - https://pypi.python.org/pypi/PyRSS2Gen
  - https://code.google.com/p/feedformatter/
    - https://code.google.com/p/feedformatter/wiki/Tutorial
      - looks great - I will stick with this:
        #+BEGIN_SRC python
from feedformatter import Feed
import time

# Create the feed
feed = Feed()

# Set the feed/channel level properties
feed.feed["title"] = "Example feed"
feed.feed["link"] = "http://www.example.com"
feed.feed["author"] = "Mr X. Ample"
feed.feed["description"] = "A simple example feed with one item in it"

# Create an item
item = {}
item["title"] = "Test item"
item["link"] = "http://www.example.com/example_url"
item["description"] = "And now for something completely different"
item["pubDate"] = time.localtime()
item["guid"] = "1234567890"

# Add item to feed
# You can do this as many times as you like with multiple items
feed.items.append(item)

# Print the feed to stdout in various formats
print feed.format_rss1_string()
print feed.format_rss2_string()
print feed.format_atom_string()

# Save the feed to a file in various formats
feed.format_rss1_file("example_feed_rss1.xml")
feed.format_rss2_file("example_feed_rss2.xml")
feed.format_atom_file("example_feed_atom.xml")
        #+END_SRC
      - installing: ~pip install feedformatter~

- I would like to generate:
  - [-] feeds/lazyblorg-all.rss -> RSS2.0
    - http://karl-voit.at/feeds/lazyblorg-all.rss_2.0.links-and-content.xml
    - http://karl-voit.at/feeds/lazyblorg-all.rss_2.0.links-only.xml
    - feedformatter supported RSS and this was no additional effort
    - since I wrote my own ATOM feed generator, I will stick to Atom
  - [X] feeds/lazyblorg-all.atom -> ATOM1.0
    - http://karl-voit.at/feeds/lazyblorg-all.atom_1.0.links-and-content.xml
    - http://karl-voit.at/feeds/lazyblorg-all.atom_1.0.links-only.xml
  - [-] feeds/lazyblorg-tags-lazyblorg.*
    - later on

- <2014-03-16 Sun 18:43>
  - I finished a version using feedformatter
  - disappointed so far:
    - could not get content to feed
      - it uses only the "preview-text" or similar
    - works only for feeds without the whole content
  - next steps: take a look at Tim Brays Atom-feed
    - http://www.tbray.org/ongoing/ongoing.atom
      - [[tsfile:2014-03-16_ongoing.atom]]
    - generate my own atom feed with no external dependency to feedformatter
    - omitted lines from header:
      #+BEGIN_EXAMPLE
  <link rel='hub' href='http://pubsubhubbub.appspot.com/' />
  <link rel='self' href='https://www.tbray.org/ongoing/ongoing.atom' />
  <link rel='replies'       thr:count='101'       href='https://www.tbray.org/ongoing/comments.atom' />
  <logo>rsslogo.jpg</logo>
      #+END_EXAMPLE
    - omitted lines from entry:
      #+BEGIN_EXAMPLE
    <link rel='replies'        thr:count='4'        type='application/xhtml+xml'        href='/ongoing/When/201x/2014/03/13/What-Retina-Means#comments' />

      #+END_EXAMPLE

** DONE separate list of tags to: lbtags, autotags, and usertags :architecture:
CLOSED: [2014-03-26 Wed 19:44] SCHEDULED: <2014-03-26 Wed>
:PROPERTIES:
:CREATED:  [2014-03-26 Mi 10:50]
:ARCHIVE_TIME: 2014-03-26 Wed 19:44
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "STARTED"    [2014-03-26 Wed 19:44]
:END:


- [X] refactor code: parser
- [X] refactor code: htmlizer
- [X] remove unnecessary filter in RSS feed generation and so on

** DONE [#A] introduce a hidden tag                              :userstory:
CLOSED: [2014-04-18 Fri 16:52]
:PROPERTIES:
:CREATED:  [2014-03-12 Mi 17:54]
:ARCHIVE_TIME: 2014-04-18 Fri 16:52
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-04-18 Fri 16:52]
:END:


- articles tagged with the hidden tag don't show up in the feed or
  the overview pages
- you have to have the URL of the article in order to see it
- handy for temporary stuff to put online only for a group of people
  you are giving the link directly

** DONE fix hidden tag causing less entries than MAXNUMBER issue       :bug:
CLOSED: [2014-04-20 Sun 20:18] SCHEDULED: <2014-04-20 Sun>
:PROPERTIES:
:CREATED:  [2014-04-18 Fri 16:51]
:ARCHIVE_TIME: 2014-04-20 Sun 20:18
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-04-20 Sun 20:18]
:END:


- new method for generating feed
  - until found feed < MAXNUMBER or END-of-list:
    - if hidden, find next one
    - if not hidden, add to found feed

** DONE create config.py as module                            :architecture:
CLOSED: [2014-04-20 Sun 22:04]
:PROPERTIES:
:CREATED:  [2013-10-01 Tue 21:05]
:ARCHIVE_TIME: 2014-04-20 Sun 22:04
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "STARTED"    [2014-04-20 Sun 22:04]
:END:


- handle configuration and run-time variables using this module
- ? parse config variables from Org-mode heading?
- see bitmessage/src/shared.py as an example
  - it's rather simple to do

- move CONSTANTS to config.py
  - [X] htmlizer
    - moving constants to config.py: htmlizer
  - [X] orgparser
  - [X] utils
    - nothing to do except some old left-overs
  - [X] lazyblorg
  - [X] testfiles(?)

** DONE add sanitizing of URLs and such to VERSE blocks               :wish:
CLOSED: [2014-08-09 Sat 15:28] SCHEDULED: <2014-08-09 Sat>
:PROPERTIES:
:CREATED:  [2014-08-09 Sat 12:11]
:ARCHIVE_TIME: 2014-08-09 Sat 15:28
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-08-09 Sat 15:28]
:END:


** DONE parse/htmlize: colon-blocks                              :userstory:
CLOSED: [2014-08-10 Sun 18:17]
:PROPERTIES:
:CREATED:  [2014-08-10 Sun 18:17]
:ARCHIVE_TIME: 2014-08-10 Sun 18:17
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-08-10 Sun 18:17]
:END:


** DONE [#C] take a look at SASS -> CSS                                               :architecture:
CLOSED: [2014-11-10 Mon 15:21]
:PROPERTIES:
:CREATED:  [2014-11-10 Mon 15:21]
:ARCHIVE_TIME: 2014-11-10 Mon 15:21
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:PROPERTIES:
:CREATED: [2013-09-13 Fri 14:06]
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-11-10 Mon 15:21]
- Not scheduled, was "2013-09-16 Mon" on [2013-09-23 Mon 18:37]
:END:


** DONE add tags to front page                                                           :userstory:
CLOSED: [2014-12-26 Fri 23:16] SCHEDULED: <2014-12-26 Fri>
:PROPERTIES:
:CREATED:  [2014-12-26 Fri 14:54]
:ARCHIVE_TIME: 2014-12-26 Fri 23:16
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
- State "DONE"       from "NEXT"       [2014-12-26 Fri 23:16]

** DONE duck duck go site search in sidebar                                              :userstory:
CLOSED: [2014-12-27 Sat 21:55]
:PROPERTIES:
:CREATED:  [2014-05-03 Sat 15:57]
:ARCHIVE_TIME: 2014-12-27 Sat 21:55
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-12-27 Sat 21:55]
:END:
[2014-05-01 Do. 08:35]

- https://duckduckgo.com/search_box

#+BEGIN_HTML
<iframe src="http://duckduckgo.com/search.html?width=200&site=karl-voit.at&prefill=Search Public Voit" style="overflow:hidden;margin:0;padding:0;width:258px;height:40px;" frameborder="0"></iframe>
#+END_HTML

- http://hardik.org/2013/06/01/stylising-duckduckgo-site-search/

** DONE [#A] (paper?) sketch: sidebar                                                    :userstory:
CLOSED: [2014-12-27 Sat 18:03] SCHEDULED: <2014-12-27 Sat>
:PROPERTIES:
:CREATED:  [2014-11-01 Sat 11:53]
:ARCHIVE_TIME: 2014-12-27 Sat 21:55
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:PROPERTIES:
:CREATED:  [2014-09-21 Sun 12:32]
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-12-27 Sat 18:03]
- Rescheduled from "<2014-11-30 Sun>" on [2014-12-01 Mon 22:03]
- Rescheduled from "<2014-11-08 Sat>" on [2014-11-09 Sun 17:27]
- Rescheduled from "<2014-10-31 Fri>" on [2014-11-01 Sat 11:53]
- Rescheduled from "2014-09-23 Tue" on [2014-10-24 Fri 15:24]
:END:


- examples:
  - http://blog.coderscabal.org/
  - http://semantic-ui.com/modules/sidebar.html

|                                       |                                  |
| public voit (the content of the page) |                                  |
|                                       | Archive                          |
|                                       | Recent articles                  |
|                                       | Search via DuckDuckGo            |
|---------------------------------------+----------------------------------|
|                                       | About this blog                  |
|                                       | How to use this blog efficiently |
|---------------------------------------+----------------------------------|
|                                       | Follow/subscribe links           |
|                                       | Follow/subscribe content         |
|                                       |                                  |

** DONE create sidebar                                                                   :userstory:
CLOSED: [2014-12-27 Sat 21:55]
:PROPERTIES:
:CREATED:  [2014-05-11 Sun 18:00]
:ARCHIVE_TIME: 2014-12-27 Sat 21:55
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2014-12-27 Sat 21:55]
:END:

- example: http://blog.coderscabal.org/
  - http://blog.coderscabal.org/wp-content/themes/messdesk/style.css
#+BEGIN_EXAMPLE
#sidebar	{
	float: right;
	width: 300px;
	padding: 0px 50px 0px 0px;
	}

#sidebar ul, #sidebar ul ol {
	margin: 0;
	padding: 0;
	}

#sidebar ul li {
	list-style-type: none;
	list-style-image: none;
	margin: 0px 0px 25px 0px;
	padding: 0px 0px 10px 0px;
	background-image: url(images/bg_sidebar_bottom.png);
	background-repeat: no-repeat;
	background-position: right bottom;
	float: left;
	}

#sidebar ul p, #sidebar ul select {
	margin: 5px 0 8px;

	}

#sidebar ul ul, #sidebar ul ol {
	margin: 0px;
	background-image: url(images/bg_sidebar_ul.jpg);
	background-repeat: repeat-y;
	background-position: right top;
	padding: 0px 0px 0px 45px;
	float: left;
	}

#sidebar ul ul ul, #sidebar ul ol {
	margin: 0 0 0 10px;
	}

ol li, #sidebar ul ol li {
	list-style: decimal outside;
	}

#sidebar ul ul li, #sidebar ul ol li {
	margin: 0px;
	padding: 8px 0px;
	background-image: url(images/bg_sidebar_li.jpg);
	background-repeat: no-repeat;
	background-position: left top;
	float: left;
	width: 255px;
	}
#sidebar ul li ul li ul {
	margin: 0px;
	padding: 0px;
	float: left;
background-image: none;
	}

#sidebar ul li ul li ul li {
	margin: 0px;
	padding: 8px 0px 0px 10px;
	float: left;
	width: 225px;
background-image: none;
	}

#+END_EXAMPLE

** DONE spike: Python binding for pandoc to convert org-snippets to html              :architecture:
CLOSED: [2015-01-27 Tue 12:22] SCHEDULED: <2015-01-30 Fr>
:PROPERTIES:
:CREATED:  [2015-01-19 Mo 13:46]
:ID:       2015-01-19-spike-pypandoc
:ARCHIVE_TIME: 2015-01-27 Tue 18:02
:ARCHIVE_FILE: c:/Users/karl.voit/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2015-01-27 Tue 12:22]
:END:
[2015-01-18 So. 22:49]

- [[https://pypi.python.org/pypi/pypandoc/][pypandoc 0.8.6 : Python Package Index]]
  - last change 2015-01
- https://pypi.python.org/pypi/pyandoc/
  - older (outdated?)
  - last change 2011-01

Going with pyandoc:

: pandoc -o org-mode-teaser.html org-mode-teaser.org

... looks great!

Using Python-bindings:
#+BEGIN_EXAMPLE
karl.voit@ATGRZ4043268X ../2del/2015-01-27-pyandoctests/pypandoc (git)-[master] % python           :(
Python 2.7.8 (default, Jul 25 2014, 14:04:36)
[GCC 4.8.3] on cygwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import pypandoc
>>> output = pypandoc.convert('#some title', 'rst', format='md')
>>> output
u'some title\r\n==========\r\n'
>>> output = pypandoc.convert('- *foo* bar', 'html', format='org')
>>> output
u'<ul>\r\n<li><strong>foo</strong> bar</li>\r\n</ul>\r\n'
>>>
#+END_EXAMPLE

** DONE tags of articles on entry page                                                   :userstory:
CLOSED: [2015-03-15 Sun 11:02]
:PROPERTIES:
:CREATED:  [2014-03-04 Di 13:41]
:ARCHIVE_TIME: 2015-03-15 Sun 11:02
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2015-03-15 Sun 11:02]
:END:

** CANCELLED parse/htmlize: lists                                                :userstory:ARCHIVE:
CLOSED: [2015-06-14 Sun 16:17]
:PROPERTIES:
:CREATED:  [2014-02-01 Sat 15:25]
:ID: 2014-08-10-lb-lists-implementation
:ARCHIVE_TIME: 2015-06-14 Sun 16:17
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: CANCELLED
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "CANCELLED"  from "NEXT"       [2015-06-14 Sun 16:17] \\
  done via pypandoc
- Not scheduled, was "2014-05-18 Sun" on [2014-05-18 Sun 09:56]
- Rescheduled from "2014-05-16 Fri" on [2014-05-17 Sat 11:34]
- Rescheduled from "2014-05-10 Sat" on [2014-05-11 Sun 17:53]
- Rescheduled from "2014-05-06 Tue" on [2014-05-07 Wed 17:32]
- Rescheduled from "2014-04-28 Mon" on [2014-04-27 Sun 22:07]
:END:

- http://orgmode.org/worg/dev/org-syntax.html#Plain_Lists_and_Items

A starting line which is not part of the list:
- example list
- second line
  - sub-items
  - another one
    - yet another level
    - This one also with a very long line that gets wrapped to a
      second line you should also take into account
  - second again
- first again
Not a list any more.

** DONE fix lists in my current blog entries                                             :userstory:
CLOSED: [2015-06-14 Sun 16:20] SCHEDULED: <2014-08-10 Sun>
:PROPERTIES:
:CREATED:  [2014-08-10 Sun 10:38]
:BLOCKER: 2014-08-10-lb-lists-implementation
:ARCHIVE_TIME: 2015-06-14 Sun 16:20
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2015-06-14 Sun 16:20]
:END:

- [X] id:apps-I-am-using
- [X] id:2012-04-15-mobile-usage-pattern
- [X] id:2012-12-23-todo-with-orgmode
- [X] id:2014-08-10-other-peoples-IT-setup

** DONE enhanced publicvoit generation wrapper script
CLOSED: [2015-08-29 Sat 20:07]
:PROPERTIES:
:CREATED:  [2015-08-29 Sat 20:07]
:ARCHIVE_TIME: 2015-08-29 Sat 20:07
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2015-08-29 Sat 20:07]
:END:
[2015-08-26 Mi. 07:46]

Script: public-voit_-_make_and_publish_-_omit_single_line_changes_to_feeds_-_stop_if_lasterror.sh
with: public-voit_-_make_and_publish_-_omit_single_line_changes_to_feeds.sh

- stop script if last_error.log is found
  - prevent multiple runs as long as there is an issue
  - manually removing last_error.log before re-activating process
- save old feed xml files
- redirect stderr to last_error.log
- delete one line changes of atom
  - if diff|wc <= 4, then overwrite new xml with old ones
  - if not: delete old ones
- delete last_error.log if successfully generated

** DONE replace http://karl-voit.at references with //karl-voit.at references
CLOSED: [2015-11-24 Tue 19:31] SCHEDULED: <2015-11-24 Tue>
:PROPERTIES:
:CREATED:  [2015-11-11 Wed 07:34]
:ARCHIVE_TIME: 2015-11-24 Tue 19:31
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2015-11-24 Tue 19:31]
:END:

** DONE parse/htmlize: tables                                                            :userstory:
CLOSED: [2016-02-07 Sun 08:59]
:PROPERTIES:
:CREATED:  [2014-02-01 Sat 15:25]
:ID: 2014-08-10-implement-lb-tables
:ARCHIVE_TIME: 2016-02-07 Sun 08:59
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2016-02-07 Sun 08:59]
:END:

- http://orgmode.org/worg/dev/org-syntax.html#Tables

** DONE fix tables in my current blog entries                                            :userstory:
CLOSED: [2016-02-07 Sun 08:59] SCHEDULED: <2015-10-06 Tue>
:PROPERTIES:
:CREATED:  [2014-08-10 Sun 10:37]
:BLOCKER: 2014-08-10-implement-lb-tables
:ARCHIVE_TIME: 2016-02-07 Sun 08:59
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2016-02-07 Sun 08:59]
- Rescheduled from "[2014-08-10 Sun]" on [2015-09-06 Sun 09:55]
:END:

- [X] id:2014-05-09-managing-digital-photographs
- [X] id:apps-I-am-using

** DONE lazyblorg: support Twitter Cards in header
CLOSED: [2016-09-17 Sat 12:46] SCHEDULED: <2016-09-17 Sat>
:PROPERTIES:
:CREATED:  [2016-09-15 Thu 20:10]
:ARCHIVE_TIME: 2016-09-17 Sat 14:03
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "STARTED"    [2016-09-17 Sat 12:46]
:END:

- inquery
  - https://dev.twitter.com/cards/getting-started

#+BEGIN_EXAMPLE
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@nytimesbits" />
<meta name="twitter:creator" content="@nickbilton" />
<meta property="og:url" content="http://bits.blogs.nytimes.com/2011/12/08/a-twitter-for-my-sister/" />
<meta property="og:title" content="A Twitter for My Sister" />
<meta property="og:description" content="In the early days, Twitter grew so quickly that it was almost impossible to add new features because engineers spent their time trying to keep the rocket ship from stalling." />
<meta property="og:image" content="http://graphics8.nytimes.com/images/2011/12/08/technology/bits-newtwitter/bits-newtwitter-tmagArticle.jpg" />
#+END_EXAMPLE

- getting started
  1. Choose a [[https://dev.twitter.com/cards/types][card type]] you want to implement.

  2. Add the pertinent [[https://dev.twitter.com/cards/markup][meta tags]] to your page.
     - twitter:card :: Used with all cards
     - twitter:site :: @username of website. Either twitter:site or twitter:site:id is required.
       - Used with summary, summary_large_image, app, player cards
     - twitter:creator :: @username of content creator
       - Used with summary_large_image cards
     - og:title :: Title of content (max 70 characters)
       - Used with summary, summary_large_image, player cards
     - og:description :: Description of content (maximum 200 characters)
       - Used with summary, summary_large_image, player cards
     - og:image :: URL of image to use in the card. Image must be less than 1MB in size
       - Used with summary, summary_large_image, player cards

  3. Run your URL against the [[https://cards-dev.twitter.com/validator][validator tool]] to test. If you are
     working with a Player Card, request approval for whitelisting.
     All other Cards do not need whitelisting.

  4. After testing in the validator or approval of your Player Card,
     Tweet the URL and see the Card appear below your tweet in the
     details view.

  5. Use [[https://dev.twitter.com/cards/analytics][Twitter Card analytics]] to measure your results.

------------

[[https://dev.twitter.com/cards/types/summary][Summary Card]]:

#+BEGIN_EXAMPLE
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@flickr" />
<meta name="og:title" content="Small Island Developing States Photo Submission" />
<meta name="og:description" content="View the album on Flickr." />
<meta name="og:image" content="https://farm6.staticflickr.com/5510/14338202952_93595258ff_z.jpg" /> <!-- OPTIONAL -->
#+END_EXAMPLE

For [[http://karl-voit.at/2016/08/06/new-mail-setup-ideas/][one of my blog entries]], this would look like:

#+BEGIN_EXAMPLE
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@n0v0id" />
<meta name="og:title" content="Thinking About a notmuch-based Email Setup" />
<meta name="og:description" content="I just finished watching a video from the early stage of notmuch which made me think of changing my mutt email setup which I am using for many[...]" />
<meta name="og:image" content="http://karl-voit.at/images/public-voit_logo.svg" /> <!-- OPTIONAL -->
#+END_EXAMPLE

og:description: it's hard to get the first paragraphs into the header.
Further more, the text most likely exceeds the maximum length.
Therefor, I will use a more basic version:

#+BEGIN_EXAMPLE
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content="@n0v0id" />
<meta name="og:title" content="Public Voit" />
<meta name="og:description" content="Thinking About a notmuch-based Email Setup" />
<meta name="og:image" content="http://karl-voit.at/images/public-voit_logo.svg" /> <!-- OPTIONAL -->
#+END_EXAMPLE

** DONE support Twitter cards rendering in lazyblorg
CLOSED: [2016-09-17 Sat 13:15] SCHEDULED: <2016-09-17 Sat>
:PROPERTIES:
:CREATED:  [2016-09-17 Sat 12:46]
:ARCHIVE_TIME: 2016-09-17 Sat 14:03
:ARCHIVE_FILE: ~/src/lazyblorg/dev/lazyblorg.org
:ARCHIVE_OLPATH: Issue Tracking
:ARCHIVE_CATEGORY: lazyblorg
:ARCHIVE_TODO: DONE
:ARCHIVE_ITAGS: issues
:END:
:LOGBOOK:
- State "DONE"       from "NEXT"       [2016-09-17 Sat 13:15]
:END:

- my idea
  - If a paragraph consists only of a tweet, include a tweet preview.

- inquiry
  - https://dev.twitter.com/web/embedded-tweets
  - https://dev.twitter.com/rest/reference/get/statuses/oembed

OK, there is no need to develop something specific. Just follow
following procedure:

1. insert an HTML block into your Org blog article
2. go to the tweet you would like to embed
   - select the three dots
   - select "Embed this Tweet"
   - copy resulting snippet
3. paste snippet into HTML block

Added HowTo to README.org
